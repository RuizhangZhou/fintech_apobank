import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare type AutoSize = {
    minRows: number;
    maxRows: number;
};
export declare class ElInputPoprs {
    type: string;
    value: string | number;
    maxlength: number;
    minlength: number;
    placeholder: string;
    size: string;
    rows: number;
    resize: string;
    icon: string;
    iconClass: string;
    autosize?: AutoSize;
    autoComplete: string;
    name: string;
    nativeType: string;
    readonly: boolean;
    autofocus: boolean;
    parentClass: string;
    model: any;
    modelChange: EventEmitter<any>;
    iconClick: EventEmitter<any>;
    focus: EventEmitter<any>;
    blur: EventEmitter<any>;
    iconMouseEnter: EventEmitter<any>;
    iconMouseLeave: EventEmitter<any>;
    iconMousedown: EventEmitter<any>;
    iconMouseup: EventEmitter<any>;
    disabled: boolean;
    elDisabled: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ElInputPoprs, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ElInputPoprs, never, never, { "type": "type"; "value": "value"; "placeholder": "placeholder"; "rows": "rows"; "autoComplete": "auto-complete"; "nativeType": "native-type"; "readonly": "readonly"; "autofocus": "autofocus"; "model": "model"; "elDisabled": "elDisabled"; "disabled": "disabled"; "maxlength": "maxlength"; "minlength": "minlength"; "size": "size"; "resize": "resize"; "icon": "icon"; "iconClass": "iconClass"; "autosize": "autosize"; "name": "name"; "parentClass": "class"; }, { "modelChange": "modelChange"; "iconClick": "icon-click"; "focus": "focus"; "blur": "blur"; "iconMouseEnter": "icon-mouseenter"; "iconMouseLeave": "icon-mouseleave"; "iconMousedown": "icon-mousedown"; "iconMouseup": "icon-mouseup"; }, never>;
}

//# sourceMappingURL=input-props.d.ts.map