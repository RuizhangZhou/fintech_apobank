import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../select/select';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../../select/option';

function ElPaginationSize_el_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "el-option", 2);
} if (rf & 2) {
    var item_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("label", item_r1.label)("value", item_r1.value);
} }
var ElPaginationSize = /** @class */ (function () {
    function ElPaginationSize() {
        this.modelChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ElPaginationSize.prototype.ngOnInit = function () {
        this.options = this.sizes.map(function (size) { return ({
            value: size,
            label: size + '条/页',
        }); });
    };
    /**
     * @nocollapse
     */
    ElPaginationSize.ctorParameters = function () { return []; };
    ElPaginationSize.propDecorators = {
        'model': [{ type: Input },],
        'sizes': [{ type: Input },],
        'modelChange': [{ type: Output },],
    };
ElPaginationSize.ɵfac = function ElPaginationSize_Factory(t) { return new (t || ElPaginationSize)(); };
ElPaginationSize.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElPaginationSize, selectors: [["el-pagination-size"]], inputs: { model: "model", sizes: "sizes" }, outputs: { modelChange: "modelChange" }, decls: 2, vars: 2, consts: [["popper-class", "is-arrow-fixed", 3, "model", "modelChange"], [3, "label", "value", 4, "ngFor", "ngForOf"], [3, "label", "value"]], template: function ElPaginationSize_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "el-select", 0);
        ɵngcc0.ɵɵlistener("modelChange", function ElPaginationSize_Template_el_select_modelChange_0_listener($event) { return ctx.modelChange.emit($event); });
        ɵngcc0.ɵɵtemplate(1, ElPaginationSize_el_option_1_Template, 1, 2, "el-option", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("model", ctx.model);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
    } }, directives: [ɵngcc1.ElSelect, ɵngcc2.NgForOf, ɵngcc3.ElOption], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElPaginationSize, [{
        type: Component,
        args: [{
                selector: 'el-pagination-size',
                template: "\n    <el-select [model]=\"model\" (modelChange)=\"modelChange.emit($event)\"\n      popper-class=\"is-arrow-fixed\">\n      <el-option *ngFor=\"let item of options\"\n        [label]=\"item.label\"\n        [value]=\"item.value\"></el-option>\n    </el-select>\n  "
            }]
    }], function () { return []; }, { modelChange: [{
            type: Output
        }], model: [{
            type: Input
        }], sizes: [{
            type: Input
        }] }); })();
    return ElPaginationSize;
}());
export { ElPaginationSize };
function ElPaginationSize_tsickle_Closure_declarations() {
    /** @type {?} */
    ElPaginationSize.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElPaginationSize.ctorParameters;
    /** @type {?} */
    ElPaginationSize.propDecorators;
    /** @type {?} */
    ElPaginationSize.prototype.model;
    /** @type {?} */
    ElPaginationSize.prototype.sizes;
    /** @type {?} */
    ElPaginationSize.prototype.modelChange;
    /** @type {?} */
    ElPaginationSize.prototype.options;
}

//# sourceMappingURL=size.js.map