import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/forms';

function ElSwitch_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 7);
} }
function ElSwitch_div_3_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r3.inactiveIconClass);
} }
function ElSwitch_div_3_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.inactiveText);
} }
function ElSwitch_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, ElSwitch_div_3_i_1_Template, 1, 2, "i", 9);
    ɵngcc0.ɵɵtemplate(2, ElSwitch_div_3_span_2_Template, 2, 1, "span", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-active", !ctx_r1._model);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.inactiveIconClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.inactiveIconClass);
} }
function ElSwitch_div_6_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r5.activeIconClass);
} }
function ElSwitch_div_6_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.activeText);
} }
function ElSwitch_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, ElSwitch_div_6_i_1_Template, 1, 2, "i", 9);
    ɵngcc0.ɵɵtemplate(2, ElSwitch_div_6_span_2_Template, 2, 1, "span", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-active", ctx_r2._model);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.activeIconClass);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.activeIconClass);
} }
var ElSwitch = /** @class */ (function () {
    /**
     * @param {?} sanitizer
     */
    function ElSwitch(sanitizer) {
        this.sanitizer = sanitizer;
        this.elDisabled = false;
        this.activeColor = '#409EFF';
        this.inactiveColor = '#C0CCDA';
        this.modelChange = new EventEmitter();
        this._model = false;
        this.hasText = false;
        this.controlChange = function () { };
        this.controlTouch = function () { };
    }
    Object.defineProperty(ElSwitch.prototype, "disabled", {
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElSwitch.prototype, "model", {
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            this._model = val;
            this.updateStyles();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nextValue
     * @return {?}
     */
    ElSwitch.prototype.changeHandle = function (nextValue) {
        this.model = nextValue;
        this.modelChange.emit(nextValue);
        this.controlChange(nextValue);
    };
    /**
     * @return {?}
     */
    ElSwitch.prototype.updateStyles = function () {
        var /** @type {?} */ baseStyle = "width: " + this.realWidth + "px;";
        var /** @type {?} */ translate = this._model ? "translate3d(" + (this.realWidth - 20) + "px, 0, 0)" : '';
        var /** @type {?} */ color = this._model ? this.activeColor : this.inactiveColor;
        var /** @type {?} */ colorStyles = "border-color: " + color + "; background-color: " + color + ";";
        this.iconTransform = this.sanitizer.bypassSecurityTrustStyle("transform: " + translate);
        if (this.activeColor && this.inactiveColor) {
            baseStyle += colorStyles;
        }
        this.coreStyles = this.sanitizer.bypassSecurityTrustStyle(baseStyle);
    };
    /**
     * @return {?}
     */
    ElSwitch.prototype.ngOnInit = function () {
        this.realWidth = this.width ? this.width : 40;
        this.updateStyles();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ElSwitch.prototype.writeValue = function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElSwitch.prototype.registerOnChange = function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElSwitch.prototype.registerOnTouched = function (fn) {
        this.controlTouch = fn;
    };
    /**
     * @nocollapse
     */
    ElSwitch.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    ElSwitch.propDecorators = {
        'disabled': [{ type: Input },],
        'elDisabled': [{ type: Input },],
        'name': [{ type: Input },],
        'width': [{ type: Input },],
        'activeIconClass': [{ type: Input, args: ['active-icon-class',] },],
        'inactiveIconClass': [{ type: Input, args: ['inactive-icon-class',] },],
        'activeText': [{ type: Input, args: ['active-text',] },],
        'inactiveText': [{ type: Input, args: ['inactive-text',] },],
        'activeColor': [{ type: Input, args: ['active-color',] },],
        'inactiveColor': [{ type: Input, args: ['inactive-color',] },],
        'model': [{ type: Input },],
        'modelChange': [{ type: Output },],
    };
ElSwitch.ɵfac = function ElSwitch_Factory(t) { return new (t || ElSwitch)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer)); };
ElSwitch.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElSwitch, selectors: [["el-switch"]], inputs: { elDisabled: "elDisabled", activeColor: ["active-color", "activeColor"], inactiveColor: ["inactive-color", "inactiveColor"], disabled: "disabled", model: "model", name: "name", width: "width", activeIconClass: ["active-icon-class", "activeIconClass"], inactiveIconClass: ["inactive-icon-class", "inactiveIconClass"], activeText: ["active-text", "activeText"], inactiveText: ["inactive-text", "inactiveText"] }, outputs: { modelChange: "modelChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ElSwitch; }),
                multi: true
            }])], decls: 7, vars: 16, consts: [[1, "el-switch"], ["class", "el-switch__mask", 4, "ngIf"], ["type", "checkbox", 1, "el-switch__input", 3, "name", "disabled", "ngModel", "ngModelChange"], ["class", "el-switch__label el-switch__label--left", 3, "is-active", 4, "ngIf"], [1, "el-switch__core"], [1, "el-switch__button"], ["class", "el-switch__label el-switch__label--right", 3, "is-active", 4, "ngIf"], [1, "el-switch__mask"], [1, "el-switch__label", "el-switch__label--left"], [3, "class", 4, "ngIf"], [4, "ngIf"], [1, "el-switch__label", "el-switch__label--right"]], template: function ElSwitch_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵtemplate(1, ElSwitch_div_1_Template, 1, 0, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function ElSwitch_Template_input_ngModelChange_2_listener($event) { return ctx.changeHandle($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ElSwitch_div_3_Template, 3, 4, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵelement(5, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ElSwitch_div_6_Template, 3, 4, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-disabled", ctx.elDisabled)("el-switch--wide", ctx.hasText)("is-checked", ctx._model);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.elDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("name", ctx.name)("disabled", ctx.elDisabled)("ngModel", ctx._model);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.inactiveText || ctx.inactiveIconClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ctx.coreStyles);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ctx.iconTransform);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.activeText || ctx.activeIconClass);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElSwitch, [{
        type: Component,
        args: [{
                selector: 'el-switch',
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ElSwitch; }),
                        multi: true
                    }],
                template: "\n    <label class=\"el-switch\"\n      [class.is-disabled]=\"elDisabled\"\n      [class.el-switch--wide]=\"hasText\"\n      [class.is-checked]=\"_model\">\n      <div class=\"el-switch__mask\" *ngIf=\"elDisabled\"></div>\n      <input class=\"el-switch__input\" type=\"checkbox\"\n        [name]=\"name\" [disabled]=\"elDisabled\"\n        [ngModel]=\"_model\" (ngModelChange)=\"changeHandle($event)\">\n      \n      <div class=\"el-switch__label el-switch__label--left\" [class.is-active]=\"!_model\"\n        *ngIf=\"inactiveText || inactiveIconClass\">\n        <i [class]=\"inactiveIconClass\" *ngIf=\"inactiveIconClass\"></i>\n        <span *ngIf=\"!inactiveIconClass\">{{ inactiveText }}</span>\n      </div>\n\n      <span class=\"el-switch__core\" [style]=\"coreStyles\">\n        <span class=\"el-switch__button\" [style]=\"iconTransform\"></span>\n      </span>\n\n      <div class=\"el-switch__label el-switch__label--right\" [class.is-active]=\"_model\"\n           *ngIf=\"activeText || activeIconClass\">\n        <i [class]=\"activeIconClass\" *ngIf=\"activeIconClass\"></i>\n        <span *ngIf=\"!activeIconClass\">{{ activeText }}</span>\n      </div>\n    </label>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }]; }, { elDisabled: [{
            type: Input
        }], activeColor: [{
            type: Input,
            args: ['active-color']
        }], inactiveColor: [{
            type: Input,
            args: ['inactive-color']
        }], modelChange: [{
            type: Output
        }], disabled: [{
            type: Input
        }], model: [{
            type: Input
        }], name: [{
            type: Input
        }], width: [{
            type: Input
        }], activeIconClass: [{
            type: Input,
            args: ['active-icon-class']
        }], inactiveIconClass: [{
            type: Input,
            args: ['inactive-icon-class']
        }], activeText: [{
            type: Input,
            args: ['active-text']
        }], inactiveText: [{
            type: Input,
            args: ['inactive-text']
        }] }); })();
    return ElSwitch;
}());
export { ElSwitch };
function ElSwitch_tsickle_Closure_declarations() {
    /** @type {?} */
    ElSwitch.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElSwitch.ctorParameters;
    /** @type {?} */
    ElSwitch.propDecorators;
    /** @type {?} */
    ElSwitch.prototype.elDisabled;
    /** @type {?} */
    ElSwitch.prototype.name;
    /** @type {?} */
    ElSwitch.prototype.width;
    /** @type {?} */
    ElSwitch.prototype.activeIconClass;
    /** @type {?} */
    ElSwitch.prototype.inactiveIconClass;
    /** @type {?} */
    ElSwitch.prototype.activeText;
    /** @type {?} */
    ElSwitch.prototype.inactiveText;
    /** @type {?} */
    ElSwitch.prototype.activeColor;
    /** @type {?} */
    ElSwitch.prototype.inactiveColor;
    /** @type {?} */
    ElSwitch.prototype.modelChange;
    /** @type {?} */
    ElSwitch.prototype._model;
    /** @type {?} */
    ElSwitch.prototype.hasText;
    /** @type {?} */
    ElSwitch.prototype.realWidth;
    /** @type {?} */
    ElSwitch.prototype.coreStyles;
    /** @type {?} */
    ElSwitch.prototype.iconTransform;
    /** @type {?} */
    ElSwitch.prototype.controlChange;
    /** @type {?} */
    ElSwitch.prototype.controlTouch;
    /** @type {?} */
    ElSwitch.prototype.sanitizer;
}

//# sourceMappingURL=switch.js.map