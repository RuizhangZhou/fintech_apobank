import { Component, Input, ElementRef, Optional } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ElMenu } from './menu';
import { ElSubmenu } from './submenu';
import { isParentTag, removeNgTag } from '../shared/utils/index';
import { Router } from '@angular/router';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './menu';
import * as ɵngcc2 from './submenu';
import * as ɵngcc3 from '@angular/platform-browser';
import * as ɵngcc4 from '@angular/router';
import * as ɵngcc5 from '@angular/common';

var _c0 = function (a1, a2, a3) { return { paddingLeft: "20px", backgroundColor: a1, borderBottomColor: a2, color: a3 }; };
var _c1 = ["*"];
var ElMenuItem = /** @class */ (function () {
    /**
     * @param {?} rootMenu
     * @param {?} subMenu
     * @param {?} sanitizer
     * @param {?} el
     * @param {?} router
     */
    function ElMenuItem(rootMenu, subMenu, sanitizer, el, router) {
        this.rootMenu = rootMenu;
        this.subMenu = subMenu;
        this.sanitizer = sanitizer;
        this.el = el;
        this.router = router;
        this.elDisabled = false;
        this.title = '';
        this.extras = {};
        this.inSubmenu = false;
    }
    Object.defineProperty(ElMenuItem.prototype, "disabled", {
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ElMenuItem.prototype.clickHandle = function () {
        var /** @type {?} */ comRef = this.subMenu || this.rootMenu;
        comRef.selectHandle(this.index);
        var /** @type {?} */ nextBorderIndex = (this.inSubmenu && this.subMenu) ? this.subMenu.index : this.index;
        this.rootMenu.showBorderIndex = nextBorderIndex;
        this.to && this.router.navigateByUrl(this.to, this.extras);
    };
    /**
     * @return {?}
     */
    ElMenuItem.prototype.borderColor = function () {
        // not show border in group
        var /** @type {?} */ dontShowBorder = this.inSubmenu && this.subMenu;
        if (dontShowBorder)
            return 'transparent';
        return this.rootMenu.showBorderIndex === this.index ?
            (this.rootMenu.activeTextColor ? this.rootMenu.activeTextColor : '')
            : 'transparent';
    };
    /**
     * @return {?}
     */
    ElMenuItem.prototype.color = function () {
        return this.rootMenu.model === this.index ?
            (this.rootMenu.activeTextColor ? this.rootMenu.activeTextColor : '#409eff')
            : this.rootMenu.textColor ? this.rootMenu.textColor : '#909399';
    };
    /**
     * @return {?}
     */
    ElMenuItem.prototype.ngOnInit = function () {
        this.inSubmenu = isParentTag(this.el.nativeElement, 'el-submenu');
        removeNgTag(this.el.nativeElement);
    };
    /**
     * @nocollapse
     */
    ElMenuItem.ctorParameters = function () { return [
        { type: ElMenu, decorators: [{ type: Optional },] },
        { type: ElSubmenu, decorators: [{ type: Optional },] },
        { type: DomSanitizer, },
        { type: ElementRef, },
        { type: Router, },
    ]; };
    ElMenuItem.propDecorators = {
        'disabled': [{ type: Input },],
        'elDisabled': [{ type: Input },],
        'index': [{ type: Input },],
        'title': [{ type: Input },],
        'to': [{ type: Input },],
        'extras': [{ type: Input },],
    };
ElMenuItem.ɵfac = function ElMenuItem_Factory(t) { return new (t || ElMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ElMenu, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ElSubmenu, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router)); };
ElMenuItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElMenuItem, selectors: [["el-menu-item"]], inputs: { elDisabled: "elDisabled", title: "title", extras: "extras", disabled: "disabled", index: "index", to: "to" }, ngContentSelectors: _c1, decls: 3, vars: 9, consts: [[1, "el-menu-item", 3, "ngStyle", "click", "mouseenter", "mouseleave"], ["list", ""]], template: function ElMenuItem_Template(rf, ctx) { if (rf & 1) {
        var _r1 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li", 0, 1);
        ɵngcc0.ɵɵlistener("click", function ElMenuItem_Template_li_click_0_listener() { return ctx.clickHandle(); })("mouseenter", function ElMenuItem_Template_li_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r1); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.style.backgroundColor = ctx.rootMenu.hoverBackgroundColor(); })("mouseleave", function ElMenuItem_Template_li_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r1); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.style.backgroundColor = ctx.rootMenu.backgroundColor || ""; });
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-active", ctx.rootMenu.model === ctx.index)("is-disabled", ctx.elDisabled);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction3(5, _c0, ctx.rootMenu.backgroundColor || "", ctx.borderColor(), ctx.color()));
    } }, directives: [ɵngcc5.NgStyle], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElMenuItem, [{
        type: Component,
        args: [{
                selector: 'el-menu-item',
                template: "\n    <li class=\"el-menu-item\" (click)=\"clickHandle()\" #list\n      [ngStyle]=\"{ paddingLeft: '20px',\n      backgroundColor: rootMenu.backgroundColor || '',\n      borderBottomColor: borderColor(),\n      color: color() }\"\n      (mouseenter)=\"list.style.backgroundColor = rootMenu.hoverBackgroundColor()\"\n      (mouseleave)=\"list.style.backgroundColor = rootMenu.backgroundColor || ''\"\n      [class.is-active]=\"rootMenu.model === index\"\n      [class.is-disabled]=\"elDisabled\">\n      <ng-content></ng-content>\n    </li>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.ElMenu, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.ElSubmenu, decorators: [{
                type: Optional
            }] }, { type: ɵngcc3.DomSanitizer }, { type: ɵngcc0.ElementRef }, { type: ɵngcc4.Router }]; }, { elDisabled: [{
            type: Input
        }], title: [{
            type: Input
        }], extras: [{
            type: Input
        }], disabled: [{
            type: Input
        }], index: [{
            type: Input
        }], to: [{
            type: Input
        }] }); })();
    return ElMenuItem;
}());
export { ElMenuItem };
function ElMenuItem_tsickle_Closure_declarations() {
    /** @type {?} */
    ElMenuItem.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElMenuItem.ctorParameters;
    /** @type {?} */
    ElMenuItem.propDecorators;
    /** @type {?} */
    ElMenuItem.prototype.elDisabled;
    /** @type {?} */
    ElMenuItem.prototype.index;
    /** @type {?} */
    ElMenuItem.prototype.title;
    /** @type {?} */
    ElMenuItem.prototype.to;
    /** @type {?} */
    ElMenuItem.prototype.extras;
    /** @type {?} */
    ElMenuItem.prototype.inSubmenu;
    /** @type {?} */
    ElMenuItem.prototype.rootMenu;
    /** @type {?} */
    ElMenuItem.prototype.subMenu;
    /** @type {?} */
    ElMenuItem.prototype.sanitizer;
    /** @type {?} */
    ElMenuItem.prototype.el;
    /** @type {?} */
    ElMenuItem.prototype.router;
}

//# sourceMappingURL=menu-item.js.map