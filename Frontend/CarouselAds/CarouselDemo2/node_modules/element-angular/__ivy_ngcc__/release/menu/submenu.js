import { Component, ContentChild, Host, Input } from '@angular/core';
import { dropAnimation } from '../shared/animation/index';
import { ElMenu } from './menu';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './menu';
import * as ɵngcc2 from '@angular/common';

var _c0 = ["title"];
function ElSubmenu_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.title, " ");
} }
function ElSubmenu_ng_container_4_ng_template_1_Template(rf, ctx) { }
function ElSubmenu_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElSubmenu_ng_container_4_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.titleTmp);
} }
var _c1 = function (a1, a2) { return { paddingLeft: "20px;", color: a1, borderBottomColor: a2 }; };
var _c2 = function (a0) { return { backgroundColor: a0 }; };
var _c3 = ["*"];
var ElSubmenu = /** @class */ (function () {
    /**
     * @param {?} rootMenu
     */
    function ElSubmenu(rootMenu) {
        this.rootMenu = rootMenu;
        this.opened = false;
        this.active = false;
        this.subActive = false;
        this.dontUserHover = false;
    }
    /**
     * @return {?}
     */
    ElSubmenu.prototype.mouseenterHandle = function () {
        var _this = this;
        this.active = true;
        if (this.dontUserHover)
            return;
        clearTimeout(this.timer);
        this.timer = setTimeout(function () {
            _this.rootMenu.openMenu(_this.index);
            _this.updateOpened();
            clearTimeout(_this.timer);
        }, 300);
    };
    /**
     * @return {?}
     */
    ElSubmenu.prototype.mouseleaveHandle = function () {
        var _this = this;
        this.active = false;
        if (this.dontUserHover)
            return;
        clearTimeout(this.timer);
        this.timer = setTimeout(function () {
            _this.rootMenu.closeMenu(_this.index);
            _this.updateOpened();
            clearTimeout(_this.timer);
        }, 300);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    ElSubmenu.prototype.selectHandle = function (path) {
        this.rootMenu.selectHandle(this.index, path);
        // selected and close list
        if (this.rootMenu.mode !== 'vertical') {
            this.rootMenu.closeMenu(this.index);
        }
        this.updateOpened();
    };
    /**
     * @return {?}
     */
    ElSubmenu.prototype.updateOpened = function () {
        this.opened = this.rootMenu.openedMenus.indexOf(this.index) > -1;
    };
    /**
     * @return {?}
     */
    ElSubmenu.prototype.clickHandle = function () {
        if (!this.dontUserHover)
            return;
        if (this.opened) {
            this.rootMenu.closeMenu(this.index);
        }
        else {
            this.rootMenu.openMenu(this.index);
        }
        this.updateOpened();
    };
    /**
     * @return {?}
     */
    ElSubmenu.prototype.borderColor = function () {
        return this.rootMenu.showBorderIndex === this.index ?
            (this.rootMenu.activeTextColor ? this.rootMenu.activeTextColor : '#409eff')
            : 'transparent';
    };
    /**
     * @return {?}
     */
    ElSubmenu.prototype.ngOnInit = function () {
        this.updateOpened();
        this.active = this.index === this.rootMenu.model;
        this.dontUserHover = this.rootMenu.mode === 'vertical' || this.rootMenu.menuTrigger !== 'hover';
    };
    /**
     * @nocollapse
     */
    ElSubmenu.ctorParameters = function () { return [
        { type: ElMenu, decorators: [{ type: Host },] },
    ]; };
    ElSubmenu.propDecorators = {
        'titleTmp': [{ type: ContentChild, args: ['title',] },],
        'index': [{ type: Input },],
        'title': [{ type: Input },],
    };
ElSubmenu.ɵfac = function ElSubmenu_Factory(t) { return new (t || ElSubmenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ElMenu, 1)); };
ElSubmenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElSubmenu, selectors: [["el-submenu"]], contentQueries: function ElSubmenu_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.titleTmp = _t.first);
    } }, inputs: { index: "index", title: "title" }, ngContentSelectors: _c3, decls: 8, vars: 20, consts: [[3, "mouseenter", "mouseleave"], [1, "el-submenu__title", 3, "ngStyle", "click", "mouseenter", "mouseleave"], ["subTitle", ""], [4, "ngIf"], [1, "el-submenu__icon-arrow"], [1, "el-menu", 3, "ngStyle"], [3, "ngTemplateOutlet"]], template: function ElSubmenu_Template(rf, ctx) { if (rf & 1) {
        var _r4 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li", 0);
        ɵngcc0.ɵɵlistener("mouseenter", function ElSubmenu_Template_li_mouseenter_0_listener() { return ctx.mouseenterHandle(); })("mouseleave", function ElSubmenu_Template_li_mouseleave_0_listener() { return ctx.mouseleaveHandle(); });
        ɵngcc0.ɵɵelementStart(1, "div", 1, 2);
        ɵngcc0.ɵɵlistener("click", function ElSubmenu_Template_div_click_1_listener() { return ctx.clickHandle(); })("mouseenter", function ElSubmenu_Template_div_mouseenter_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); var _r0 = ɵngcc0.ɵɵreference(2); return _r0.style.backgroundColor = ctx.rootMenu.hoverBackgroundColor(); })("mouseleave", function ElSubmenu_Template_div_mouseleave_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); var _r0 = ɵngcc0.ɵɵreference(2); return _r0.style.backgroundColor = ""; });
        ɵngcc0.ɵɵtemplate(3, ElSubmenu_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(4, ElSubmenu_ng_container_4_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelement(5, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "ul", 5);
        ɵngcc0.ɵɵprojection(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("el-submenu", true)("is-active", ctx.active)("is-opened", ctx.opened);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(15, _c1, ctx.rootMenu.textColor || "", ctx.borderColor()));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.titleTmp);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.titleTmp);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("el-icon-caret-bottom", ctx.rootMenu.mode === "horizontal")("el-icon-arrow-down", ctx.rootMenu.mode === "vertical");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@dropAnimation", ctx.opened)("ngStyle", ɵngcc0.ɵɵpureFunction1(18, _c2, ctx.rootMenu.backgroundColor || ""));
    } }, directives: [ɵngcc2.NgStyle, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet], encapsulation: 2, data: { animation: [dropAnimation] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElSubmenu, [{
        type: Component,
        args: [{
                selector: 'el-submenu',
                animations: [dropAnimation],
                template: "\n    <li [class.el-submenu]=\"true\"\n      [class.is-active]=\"active\"\n      [class.is-opened]=\"opened\"\n      (mouseenter)=\"mouseenterHandle()\"\n      (mouseleave)=\"mouseleaveHandle()\">\n      <div class=\"el-submenu__title\" (click)=\"clickHandle()\"\n        [ngStyle]=\"{ paddingLeft: '20px;', color: rootMenu.textColor || '', borderBottomColor: borderColor() }\"\n        #subTitle\n        (mouseenter)=\"subTitle.style.backgroundColor = rootMenu.hoverBackgroundColor()\"\n        (mouseleave)=\"subTitle.style.backgroundColor = ''\">\n        <ng-container *ngIf=\"!titleTmp\">\n          {{title}}\n        </ng-container>\n        <ng-container *ngIf=\"titleTmp\">\n          <ng-template [ngTemplateOutlet]=\"titleTmp\"></ng-template>\n        </ng-container>\n        <i class=\"el-submenu__icon-arrow\"\n          [class.el-icon-caret-bottom]=\"rootMenu.mode === 'horizontal'\"\n          [class.el-icon-arrow-down]=\"rootMenu.mode === 'vertical'\"></i>\n      </div>\n      <ul class=\"el-menu\" [@dropAnimation]=\"opened\"\n        [ngStyle]=\"{ backgroundColor: rootMenu.backgroundColor || '' }\">\n        <ng-content></ng-content>\n      </ul>\n    </li>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.ElMenu, decorators: [{
                type: Host
            }] }]; }, { titleTmp: [{
            type: ContentChild,
            args: ['title']
        }], index: [{
            type: Input
        }], title: [{
            type: Input
        }] }); })();
    return ElSubmenu;
}());
export { ElSubmenu };
function ElSubmenu_tsickle_Closure_declarations() {
    /** @type {?} */
    ElSubmenu.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElSubmenu.ctorParameters;
    /** @type {?} */
    ElSubmenu.propDecorators;
    /** @type {?} */
    ElSubmenu.prototype.titleTmp;
    /** @type {?} */
    ElSubmenu.prototype.index;
    /** @type {?} */
    ElSubmenu.prototype.title;
    /** @type {?} */
    ElSubmenu.prototype.timer;
    /** @type {?} */
    ElSubmenu.prototype.opened;
    /** @type {?} */
    ElSubmenu.prototype.active;
    /** @type {?} */
    ElSubmenu.prototype.subActive;
    /** @type {?} */
    ElSubmenu.prototype.dontUserHover;
    /** @type {?} */
    ElSubmenu.prototype.rootMenu;
}

//# sourceMappingURL=submenu.js.map