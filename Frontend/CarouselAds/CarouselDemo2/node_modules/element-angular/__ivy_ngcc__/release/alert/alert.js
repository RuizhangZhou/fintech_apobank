import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, ContentChild, } from '@angular/core';
import { fadeAnimation } from './animation';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["description"];
function ElAlert_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap("el-alert__icon " + ctx_r0.makeIconClass());
} }
function ElAlert_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.description);
} }
function ElAlert_p_6_ng_template_1_Template(rf, ctx) { }
function ElAlert_p_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 5);
    ɵngcc0.ɵɵtemplate(1, ElAlert_p_6_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.descriptionTmp);
} }
function ElAlert_i_7_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 7);
    ɵngcc0.ɵɵlistener("click", function ElAlert_i_7_Template_i_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clickHandle($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-customed", ctx_r3.closeText !== "")("el-icon-close", ctx_r3.closeText === "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.closeText, " ");
} }
var _c1 = ["*"];
export var /** @type {?} */ ICON_CLASS_MAP = {
    'success': 'el-icon-success',
    'warning': 'el-icon-warning',
    'error': 'el-icon-error',
    'info': 'el-icon-info',
};
var ElAlert = /** @class */ (function () {
    function ElAlert() {
        this.type = 'info';
        this.center = false;
        this.closable = true;
        this.closeText = '';
        this.showIcon = false;
        this.close = new EventEmitter();
        this.visible = true;
    }
    /**
     * @return {?}
     */
    ElAlert.prototype.makeIconClass = function () {
        var /** @type {?} */ base = ICON_CLASS_MAP[this.type] || 'el-icon-info';
        var /** @type {?} */ isBig = this.description || this.descriptionTmp ? ' is-big' : '';
        return base + isBig;
    };
    /**
     * @return {?}
     */
    ElAlert.prototype.makeTitleClass = function () {
        return this.description || this.descriptionTmp ? ' is-bold' : '';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ElAlert.prototype.clickHandle = function (event) {
        this.visible = false;
        this.close.emit(event);
    };
    /**
     * @nocollapse
     */
    ElAlert.ctorParameters = function () { return []; };
    ElAlert.propDecorators = {
        'descriptionTmp': [{ type: ContentChild, args: ['description',] },],
        'type': [{ type: Input },],
        'center': [{ type: Input },],
        'description': [{ type: Input },],
        'closable': [{ type: Input },],
        'closeText': [{ type: Input, args: ['close-text',] },],
        'showIcon': [{ type: Input, args: ['show-icon',] },],
        'close': [{ type: Output },],
    };
ElAlert.ɵfac = function ElAlert_Factory(t) { return new (t || ElAlert)(); };
ElAlert.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElAlert, selectors: [["el-alert"]], contentQueries: function ElAlert_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.descriptionTmp = _t.first);
    } }, inputs: { type: "type", center: "center", closable: "closable", closeText: ["close-text", "closeText"], showIcon: ["show-icon", "showIcon"], description: "description" }, outputs: { close: "close" }, ngContentSelectors: _c1, decls: 8, vars: 11, consts: [["role", "alert"], [3, "class", 4, "ngIf"], [1, "el-alert__content"], ["class", "el-alert__description", 4, "ngIf"], ["class", "el-alert__closebtn", 3, "is-customed", "el-icon-close", "click", 4, "ngIf"], [1, "el-alert__description"], [3, "ngTemplateOutlet"], [1, "el-alert__closebtn", 3, "click"]], template: function ElAlert_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ElAlert_i_1_Template, 1, 2, "i", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "span");
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, ElAlert_p_5_Template, 2, 1, "p", 3);
        ɵngcc0.ɵɵtemplate(6, ElAlert_p_6_Template, 2, 1, "p", 3);
        ɵngcc0.ɵɵtemplate(7, ElAlert_i_7_Template, 2, 5, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap("el-alert el-alert--" + ctx.type);
        ɵngcc0.ɵɵclassProp("is-center", ctx.center);
        ɵngcc0.ɵɵproperty("@fadeAnimation", !ctx.visible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showIcon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassMap("el-alert__title " + ctx.makeTitleClass());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.description && !ctx.descriptionTmp);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.descriptionTmp);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.closable);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, data: { animation: [fadeAnimation] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElAlert, [{
        type: Component,
        args: [{
                selector: 'el-alert',
                animations: [fadeAnimation],
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n    <div [class]=\"'el-alert el-alert--' + type\" [@fadeAnimation]=\"!visible\"\n      [class.is-center]=\"center\" role=\"alert\">\n      <i [class]=\"'el-alert__icon ' + makeIconClass()\" *ngIf=\"showIcon\"></i>\n      <div class=\"el-alert__content\">\n        <span [class]=\"'el-alert__title ' + makeTitleClass()\">\n          <ng-content></ng-content>\n        </span>\n        <p class=\"el-alert__description\" *ngIf=\"description && !descriptionTmp\">{{description}}</p>\n        <p class=\"el-alert__description\" *ngIf=\"descriptionTmp\"><ng-template [ngTemplateOutlet]=\"descriptionTmp\"></ng-template></p>\n        <i class=\"el-alert__closebtn\"\n          *ngIf=\"closable\"\n          [class.is-customed]=\"closeText !== ''\"\n          [class.el-icon-close]=\"closeText === ''\"\n          (click)=\"clickHandle($event)\">\n          {{closeText}}\n        </i>\n      </div>\n    </div>\n  "
            }]
    }], function () { return []; }, { type: [{
            type: Input
        }], center: [{
            type: Input
        }], closable: [{
            type: Input
        }], closeText: [{
            type: Input,
            args: ['close-text']
        }], showIcon: [{
            type: Input,
            args: ['show-icon']
        }], close: [{
            type: Output
        }], descriptionTmp: [{
            type: ContentChild,
            args: ['description']
        }], description: [{
            type: Input
        }] }); })();
    return ElAlert;
}());
export { ElAlert };
function ElAlert_tsickle_Closure_declarations() {
    /** @type {?} */
    ElAlert.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElAlert.ctorParameters;
    /** @type {?} */
    ElAlert.propDecorators;
    /** @type {?} */
    ElAlert.prototype.descriptionTmp;
    /** @type {?} */
    ElAlert.prototype.type;
    /** @type {?} */
    ElAlert.prototype.center;
    /** @type {?} */
    ElAlert.prototype.description;
    /** @type {?} */
    ElAlert.prototype.closable;
    /** @type {?} */
    ElAlert.prototype.closeText;
    /** @type {?} */
    ElAlert.prototype.showIcon;
    /** @type {?} */
    ElAlert.prototype.close;
    /** @type {?} */
    ElAlert.prototype.visible;
}

//# sourceMappingURL=alert.js.map