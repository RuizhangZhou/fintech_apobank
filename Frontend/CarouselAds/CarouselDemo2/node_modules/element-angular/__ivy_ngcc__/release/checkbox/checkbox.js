import { Component, Input, Output, EventEmitter, ElementRef, Optional, ViewChild, forwardRef, } from '@angular/core';
import { ElCheckboxGroup } from './checkbox-group';
import { isParentTag, removeNgTag } from '../shared/utils/index';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './checkbox-group';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/common';

var _c0 = ["content"];
function ElCheckbox_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);
} }
function ElCheckbox_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", null, 6);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} }
var _c1 = ["*"];
var ElCheckbox = /** @class */ (function () {
    /**
     * @param {?} hostGroup
     * @param {?} el
     */
    function ElCheckbox(hostGroup, el) {
        this.hostGroup = hostGroup;
        this.el = el;
        this.elDisabled = false;
        this.indeterminate = false;
        this.checked = false;
        this.modelChange = new EventEmitter();
        this.parentIsGroup = false;
        this.isFocus = false;
        this.showLabel = false;
        this.controlChange = function () { };
        this.controlTouch = function () { };
    }
    Object.defineProperty(ElCheckbox.prototype, "disabled", {
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ElCheckbox.prototype.isChecked = function () {
        if (this.parentIsGroup) {
            return this.hostGroup.model.indexOf(this.label) > -1;
        }
        return this.model;
    };
    /**
     * @param {?} t
     * @param {?=} notEmit
     * @return {?}
     */
    ElCheckbox.prototype.changeHandle = function (t, notEmit) {
        if (notEmit === void 0) { notEmit = false; }
        if (this.parentIsGroup) {
            return this.hostGroup.updateModelFromChildren(t, this.label);
        }
        this.model = t;
        this.checked = this.isChecked();
        if (notEmit)
            return;
        this.modelChange.emit(this.model);
        this.controlChange(this.model);
    };
    /**
     * @return {?}
     */
    ElCheckbox.prototype.ngOnInit = function () {
        var _this = this;
        var /** @type {?} */ nativeElement = this.el.nativeElement;
        this.parentIsGroup = isParentTag(nativeElement, 'el-checkbox-group');
        removeNgTag(nativeElement);
        // update model from group
        if (this.parentIsGroup) {
            this.labels = this.hostGroup.model;
            this.model = this.isChecked();
            // update handle
            this.hostGroup.subscriber.push(function () {
                _this.model = _this.isChecked();
                _this.checked = _this.isChecked();
            });
        }
        this.checked = this.isChecked();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ElCheckbox.prototype.ngOnChanges = function (changes) {
        if (!changes || !changes.model)
            return;
        if (changes.model.isFirstChange())
            return;
        this.changeHandle(changes.model.currentValue, true);
    };
    /**
     * @return {?}
     */
    ElCheckbox.prototype.ngAfterViewInit = function () {
        var _this = this;
        var /** @type {?} */ contentText = this.content && this.content.nativeElement.innerText;
        setTimeout(function () {
            _this.showLabel = !contentText || contentText.length < 1;
        }, 0);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ElCheckbox.prototype.writeValue = function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElCheckbox.prototype.registerOnChange = function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElCheckbox.prototype.registerOnTouched = function (fn) {
        this.controlTouch = fn;
    };
    /**
     * @nocollapse
     */
    ElCheckbox.ctorParameters = function () { return [
        { type: ElCheckboxGroup, decorators: [{ type: Optional },] },
        { type: ElementRef, },
    ]; };
    ElCheckbox.propDecorators = {
        'content': [{ type: ViewChild, args: ['content',] },],
        'disabled': [{ type: Input },],
        'elDisabled': [{ type: Input },],
        'label': [{ type: Input },],
        'model': [{ type: Input },],
        'indeterminate': [{ type: Input },],
        'checked': [{ type: Input },],
        'name': [{ type: Input },],
        'trueLabel': [{ type: Input, args: ['true-label',] },],
        'modelChange': [{ type: Output },],
    };
ElCheckbox.ɵfac = function ElCheckbox_Factory(t) { return new (t || ElCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ElCheckboxGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ElCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElCheckbox, selectors: [["el-checkbox"]], viewQuery: function ElCheckbox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, inputs: { elDisabled: "elDisabled", indeterminate: "indeterminate", checked: "checked", disabled: "disabled", model: "model", label: "label", name: "name", trueLabel: ["true-label", "trueLabel"] }, outputs: { modelChange: "modelChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ElCheckbox; }),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 7, vars: 14, consts: [[1, "el-checkbox"], [1, "el-checkbox__input"], [1, "el-checkbox__inner"], ["type", "checkbox", 1, "el-checkbox__original", 3, "disabled", "value", "name", "ngModel", "ngModelChange", "focus", "blur"], [1, "el-checkbox__label", 2, "padding-left", "6px"], [4, "ngIf"], ["content", ""]], template: function ElCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵelement(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "input", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function ElCheckbox_Template_input_ngModelChange_3_listener($event) { return ctx.changeHandle($event); })("focus", function ElCheckbox_Template_input_focus_3_listener() { return ctx.isFocus = true; })("blur", function ElCheckbox_Template_input_blur_3_listener() { return ctx.isFocus = false; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵtemplate(5, ElCheckbox_ng_container_5_Template, 2, 1, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(6, ElCheckbox_span_6_Template, 3, 0, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("is-disabled", ctx.elDisabled)("is-focus", ctx.isFocus)("is-indeterminate", ctx.indeterminate)("is-checked", ctx.checked);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.elDisabled)("value", ctx.label)("name", ctx.name)("ngModel", ctx.model);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.showLabel);
    } }, directives: [ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc3.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElCheckbox, [{
        type: Component,
        args: [{
                selector: 'el-checkbox',
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ElCheckbox; }),
                        multi: true
                    }],
                template: "\n    <label class=\"el-checkbox\">\n    <span class=\"el-checkbox__input\"\n      [class.is-disabled]=\"elDisabled\" [class.is-focus]=\"isFocus\"\n      [class.is-indeterminate]=\"indeterminate\" [class.is-checked]=\"checked\">\n      <span class=\"el-checkbox__inner\"></span>\n      <input class=\"el-checkbox__original\" type=\"checkbox\"\n        [disabled]=\"elDisabled\" [value]=\"label\" [name]=\"name\"\n        [ngModel]=\"model\" (ngModelChange)=\"changeHandle($event)\"\n        (focus)=\"isFocus = true\" (blur)=\"isFocus = false\">\n    </span>\n    <span class=\"el-checkbox__label\" style=\"padding-left: 6px;\">\n      <ng-container *ngIf=\"showLabel\">{{label}}</ng-container>\n      <span *ngIf=\"!showLabel\" #content>\n        <ng-content></ng-content>\n      </span>\n    </span>\n    </label>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.ElCheckboxGroup, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ElementRef }]; }, { elDisabled: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], checked: [{
            type: Input
        }], modelChange: [{
            type: Output
        }], disabled: [{
            type: Input
        }], model: [{
            type: Input
        }], content: [{
            type: ViewChild,
            args: ['content']
        }], label: [{
            type: Input
        }], name: [{
            type: Input
        }], trueLabel: [{
            type: Input,
            args: ['true-label']
        }] }); })();
    return ElCheckbox;
}());
export { ElCheckbox };
function ElCheckbox_tsickle_Closure_declarations() {
    /** @type {?} */
    ElCheckbox.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElCheckbox.ctorParameters;
    /** @type {?} */
    ElCheckbox.propDecorators;
    /** @type {?} */
    ElCheckbox.prototype.content;
    /** @type {?} */
    ElCheckbox.prototype.elDisabled;
    /** @type {?} */
    ElCheckbox.prototype.label;
    /** @type {?} */
    ElCheckbox.prototype.model;
    /** @type {?} */
    ElCheckbox.prototype.indeterminate;
    /** @type {?} */
    ElCheckbox.prototype.checked;
    /** @type {?} */
    ElCheckbox.prototype.name;
    /** @type {?} */
    ElCheckbox.prototype.trueLabel;
    /** @type {?} */
    ElCheckbox.prototype.modelChange;
    /** @type {?} */
    ElCheckbox.prototype.labels;
    /** @type {?} */
    ElCheckbox.prototype.parentIsGroup;
    /** @type {?} */
    ElCheckbox.prototype.isFocus;
    /** @type {?} */
    ElCheckbox.prototype.showLabel;
    /** @type {?} */
    ElCheckbox.prototype.controlChange;
    /** @type {?} */
    ElCheckbox.prototype.controlTouch;
    /** @type {?} */
    ElCheckbox.prototype.hostGroup;
    /** @type {?} */
    ElCheckbox.prototype.el;
}

//# sourceMappingURL=checkbox.js.map