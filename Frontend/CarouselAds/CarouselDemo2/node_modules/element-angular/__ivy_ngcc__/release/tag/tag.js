import { Component, Input, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';

function ElTag_i_2_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 1);
    ɵngcc0.ɵɵlistener("click", function ElTag_i_2_Template_i_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); var ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.closeEmitter.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} }
var _c0 = ["*"];
var ElTag = /** @class */ (function () {
    /**
     * @param {?} sanitizer
     */
    function ElTag(sanitizer) {
        this.sanitizer = sanitizer;
        this.closable = false;
        this.hit = false;
        this.closeTransition = false;
        this.closeEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ElTag.prototype.ngOnInit = function () {
        var /** @type {?} */ styles = "backgroundColor: " + this.color;
        this.tagStyles = this.sanitizer.bypassSecurityTrustStyle(styles);
    };
    /**
     * @nocollapse
     */
    ElTag.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    ElTag.propDecorators = {
        'type': [{ type: Input },],
        'closable': [{ type: Input },],
        'hit': [{ type: Input },],
        'color': [{ type: Input },],
        'size': [{ type: Input },],
        'closeTransition': [{ type: Input, args: ['close-transition',] },],
        'closeEmitter': [{ type: Output, args: ['close',] },],
    };
ElTag.ɵfac = function ElTag_Factory(t) { return new (t || ElTag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer)); };
ElTag.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElTag, selectors: [["el-tag"]], inputs: { closable: "closable", hit: "hit", closeTransition: ["close-transition", "closeTransition"], type: "type", color: "color", size: "size" }, outputs: { closeEmitter: "close" }, ngContentSelectors: _c0, decls: 3, vars: 5, consts: [["class", "el-tag__close el-icon-close", 3, "click", 4, "ngIf"], [1, "el-tag__close", "el-icon-close", 3, "click"]], template: function ElTag_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵtemplate(2, ElTag_i_2_Template, 1, 0, "i", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap("el-tag" + (ctx.type ? " el-tag--" + ctx.type : "") + (ctx.size ? " el-tag--" + ctx.size : ""));
        ɵngcc0.ɵɵclassProp("is-hit", ctx.hit);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.closable);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElTag, [{
        type: Component,
        args: [{
                selector: 'el-tag',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n    <span [class]=\"'el-tag' + (type ? ' el-tag--' + type : '') + (size ? ' el-tag--' + size : '')\"\n      [class.is-hit]=\"hit\">\n      <ng-content></ng-content>\n      <i class=\"el-tag__close el-icon-close\" *ngIf=\"closable\" (click)=\"closeEmitter.emit($event)\"></i>\n    </span>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }]; }, { closable: [{
            type: Input
        }], hit: [{
            type: Input
        }], closeTransition: [{
            type: Input,
            args: ['close-transition']
        }], closeEmitter: [{
            type: Output,
            args: ['close']
        }], type: [{
            type: Input
        }], color: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return ElTag;
}());
export { ElTag };
function ElTag_tsickle_Closure_declarations() {
    /** @type {?} */
    ElTag.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElTag.ctorParameters;
    /** @type {?} */
    ElTag.propDecorators;
    /** @type {?} */
    ElTag.prototype.type;
    /** @type {?} */
    ElTag.prototype.closable;
    /** @type {?} */
    ElTag.prototype.hit;
    /** @type {?} */
    ElTag.prototype.color;
    /** @type {?} */
    ElTag.prototype.size;
    /** @type {?} */
    ElTag.prototype.closeTransition;
    /** @type {?} */
    ElTag.prototype.closeEmitter;
    /** @type {?} */
    ElTag.prototype.tagStyles;
    /** @type {?} */
    ElTag.prototype.sanitizer;
}

//# sourceMappingURL=tag.js.map