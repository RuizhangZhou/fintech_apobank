{"version":3,"file":"upload.request.js","sources":["../../src/upload/upload.request.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,WAAA,EAAa,WAAA,EAAY,MAAA,sBAAA,CAAA;AAC9C,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;;;AAEpB;AAEiB,IAIjB;AACA;AAEA,OADG;AACH,IAAA,yBACY,IAAM;AAAI,QAAV,SAAA,GAAA,IAAA,CAAM;AAAC,IAEjB,CAAC;AACH,IAAA;AACA;AACI;AACI;AAEA,OADL;AACH,IAAA,gCAJG,GAIH,UAJG,IAAA,EAAA,IAAA;AAAI,QAKH,IAAM,gBAAgB,CAJhB,GAAA,GAAuB,IAAI,WAAA,CAAY,MAAC,EAAO,IAAA,EAAM,IAAA,EAAM;AAGpC,YAE3B,OAAO,EAJE,IAAA,CAAK,OAAC;AAEjB,YAGE,cAAc,EAJE,IAAA;AACF,YAId,eAAe,EAJE,IAAA,CAAK,eAAC;AAAE,SAK1B,CAJC,CAAA;AAAC,QAKH,MAAM,CAJC,IAAA,CAAK,IAAC,CAAI,OAAC,CAAO,GAAC,CAAG,CAAA;AAC5B,IAIH,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IAAA,mCAPG,GAOH,UAPG,OAAA;AACH,QADG,wBAAA,EAAA,YAAA;AACH,QAOI,IAAI,CAPC,OAAC,GAAS,IAAI,WAAA,CAAY,OAAC,CAAO,CAAA;AAGzC,QAKE,MAAM,CAPC,IAAA,CAAA;AAEP,IAMF,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IAAA,wCAVG,GAUH,UAVG,eAAA;AAAI,QAWH,IAAI,CAVC,eAAC,GAAiB,eAAA,CAAA;AACH,QAUpB,MAAM,CAVC,IAAA,CAAA;AAAC,IAWV,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IAAA,qCAbG,GAaH,UAbG,IAAA;AACA,QAaC,IAAI,CAbC,QAAC,GAAU,IAAA,CAAA;AACH,QAab,MAAM,CAbC,IAAA,CAAA;AAAC,IAcV,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IAAA,sCAhBG,GAgBH,UAhBG,IAAA;AAAI,QAAJ,qBAAA,EAAA,SAAA;AAAI,QAiBH,IAAI,CAhBC,WAAC,GAAa,IAAA,CAAA;AAAC,QAiBpB,MAAM,CAhBC,IAAA,CAAA;AAAC,IAiBV,CAAC,CAZD;IAFK,JAEJ,IAiBH;AACA;GApBO,GAAoC,NAsB3C,OADG;QAJH,EAhBE,IAAA,EAAM,UAAA,EAAW,OAiBlB,nCAID,IAlBC,8BAAA,GAAA,cAAA,OAAA;AAAE,QAmBH,EAAC,IAAI,EAAE,UAAU,GAAG;AACpB,KAAC,EApBA,CAoBA;;;;;2EAAC;AACF,IAAA,sBAAC;AAED,CAtEA,AAoEC,IAAA;AACD,SAnEC,eAAA;AAoED;AACA,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,UAAU,CAAC;AAC3B,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,eAAe,CAAC,cAAc,CAAC;AAC/B,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;AAClC,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC;AAC1C,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;AACnC,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,SAAS,CAAC,WAAW,CAAC;AACtC,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;AAC/B,CAAC;AACD","sourcesContent":["import { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nexport class ElUploadRequest {\n  \n  headers: HttpHeaders\n  withCredentials: boolean\n  fileName: string\n  defaultBody: any\n/**\n * @param {?} http\n */\nconstructor(\nprivate http: HttpClient,\n  ) {\n  }\n/**\n * @param {?} path\n * @param {?} file\n * @return {?}\n */\nupload(path: string, file: File): Observable<any> {\n    const /** @type {?} */ req: HttpRequest<{}> = new HttpRequest('POST', path, file, {\n      headers: this.headers,\n      reportProgress: true,\n      withCredentials: this.withCredentials,\n    })\n    return this.http.request(req)\n  }\n/**\n * @param {?=} headers\n * @return {?}\n */\nsetHeader(headers: any = {}): ElUploadRequest {\n    this.headers = new HttpHeaders(headers)\n    return this\n  }\n/**\n * @param {?} withCredentials\n * @return {?}\n */\nsetCredentials(withCredentials: boolean): ElUploadRequest {\n    this.withCredentials = withCredentials\n    return this\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nsetFileName(name: string): ElUploadRequest {\n    this.fileName = name\n    return this\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\naddExtraData(data: any = {}): ElUploadRequest {\n    this.defaultBody = data\n    return this\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n];\n}\n\nfunction ElUploadRequest_tsickle_Closure_declarations() {\n/** @type {?} */\nElUploadRequest.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElUploadRequest.ctorParameters;\n/** @type {?} */\nElUploadRequest.prototype.headers;\n/** @type {?} */\nElUploadRequest.prototype.withCredentials;\n/** @type {?} */\nElUploadRequest.prototype.fileName;\n/** @type {?} */\nElUploadRequest.prototype.defaultBody;\n/** @type {?} */\nElUploadRequest.prototype.http;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}