import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ElUploadDragger = /** @class */ (function () {
    function ElUploadDragger() {
        this.elDisabled = false;
        this.change = new EventEmitter();
        this.dragger = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ElUploadDragger.prototype.dragoverHandle = function (event) {
        event.preventDefault();
        if (this.elDisabled)
            return;
        this.dragger = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ElUploadDragger.prototype.dragLeaveHandle = function (event) {
        event.preventDefault();
        this.dragger = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ElUploadDragger.prototype.dropHandle = function (event) {
        event.preventDefault();
        if (this.elDisabled)
            return;
        this.change.emit({ target: { files: event.dataTransfer.files } });
    };
    /**
     * @nocollapse
     */
    ElUploadDragger.ctorParameters = function () { return []; };
    ElUploadDragger.propDecorators = {
        'elDisabled': [{ type: Input },],
        'change': [{ type: Output },],
    };
ElUploadDragger.ɵfac = function ElUploadDragger_Factory(t) { return new (t || ElUploadDragger)(); };
ElUploadDragger.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElUploadDragger, selectors: [["el-upload-dragger"]], inputs: { elDisabled: "elDisabled" }, outputs: { change: "change" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[1, "el-upload-dragger", 3, "drop", "dragover", "dragleave"]], template: function ElUploadDragger_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("drop", function ElUploadDragger_Template_div_drop_0_listener($event) { return ctx.dropHandle($event); })("dragover", function ElUploadDragger_Template_div_dragover_0_listener($event) { return ctx.dragoverHandle($event); })("dragleave", function ElUploadDragger_Template_div_dragleave_0_listener($event) { return ctx.dragLeaveHandle($event); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-dragover", ctx.dragger);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElUploadDragger, [{
        type: Component,
        args: [{
                selector: 'el-upload-dragger',
                template: "\n    <div class=\"el-upload-dragger\"\n      [class.is-dragover]=\"dragger\"\n      (drop)=\"dropHandle($event)\"\n      (dragover)=\"dragoverHandle($event)\"\n      (dragleave)=\"dragLeaveHandle($event)\">\n      <ng-content></ng-content>\n    </div>\n  "
            }]
    }], function () { return []; }, { elDisabled: [{
            type: Input
        }], change: [{
            type: Output
        }] }); })();
    return ElUploadDragger;
}());
export { ElUploadDragger };
function ElUploadDragger_tsickle_Closure_declarations() {
    /** @type {?} */
    ElUploadDragger.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElUploadDragger.ctorParameters;
    /** @type {?} */
    ElUploadDragger.propDecorators;
    /** @type {?} */
    ElUploadDragger.prototype.elDisabled;
    /** @type {?} */
    ElUploadDragger.prototype.change;
    /** @type {?} */
    ElUploadDragger.prototype.dragger;
}

//# sourceMappingURL=upload.dragger.js.map