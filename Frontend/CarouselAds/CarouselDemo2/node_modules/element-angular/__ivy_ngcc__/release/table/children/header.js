import { Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../../shared/pipe/css-value';

function ElTableHeader_ng_template_0_col_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "col", 5);
} if (rf & 2) {
    var item_r5 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("width", item_r5.width);
} }
function ElTableHeader_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ElTableHeader_ng_template_0_col_0_Template, 1, 1, "col", 4);
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.columnsWidth);
} }
function ElTableHeader_ng_template_3_Template(rf, ctx) { }
var _c0 = function (a0) { return { width: a0 }; };
var _c1 = function (a0, a1, a2) { return { width: a0, "display": a1, "text-align": a2 }; };
function ElTableHeader_tr_4_th_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 7);
    ɵngcc0.ɵɵpipe(1, "cssValue");
    ɵngcc0.ɵɵelementStart(2, "div", 8);
    ɵngcc0.ɵɵpipe(3, "cssValue");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var th_r8 = ctx.$implicit;
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r7.makeClasses(th_r8));
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(11, _c0, ɵngcc0.ɵɵpipeBind1(1, 7, th_r8.width)));
    ɵngcc0.ɵɵattribute("colspan", ctx_r7.getColspan(th_r8))("rowspan", ctx_r7.getRowspan(th_r8));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction3(13, _c1, ɵngcc0.ɵɵpipeBind1(3, 9, th_r8.width), ctx_r7.center ? "block" : "inline-block", ctx_r7.center ? "center" : "unset"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(th_r8.label);
} }
function ElTableHeader_tr_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵtemplate(1, ElTableHeader_tr_4_th_1_Template, 5, 17, "th", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var tr_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", tr_r6);
} }
var _c2 = function () { return { width: "100%" }; };
var ElTableHeader = /** @class */ (function () {
    function ElTableHeader() {
        this.model = [];
        this.border = false;
        this.columnsWidth = [];
    }
    /**
     * @param {?} th
     * @return {?}
     */
    ElTableHeader.prototype.makeClasses = function (th) {
        var /** @type {?} */ isLeaf = this.getColspan(th) > 1 ? '' : 'is-leaf';
        return this.height === 'auto' ? isLeaf + " " : ' gutter';
    };
    /**
     * @param {?} td
     * @return {?}
     */
    ElTableHeader.prototype.getRowspan = function (td) {
        if (td.deep === 0 && td.level !== 0) {
            return td.level + 1;
        }
        return 1;
    };
    /**
     * @param {?} th
     * @return {?}
     */
    ElTableHeader.prototype.getColspan = function (th) {
        return th.childCount > 0 ? th.childCount : 1;
    };
    /**
     * @nocollapse
     */
    ElTableHeader.ctorParameters = function () { return []; };
    ElTableHeader.propDecorators = {
        'model': [{ type: Input },],
        'layout': [{ type: Input },],
        'border': [{ type: Input },],
        'height': [{ type: Input },],
        'center': [{ type: Input },],
        'columnsWidth': [{ type: Input, args: ['columns-width',] },],
    };
ElTableHeader.ɵfac = function ElTableHeader_Factory(t) { return new (t || ElTableHeader)(); };
ElTableHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElTableHeader, selectors: [["el-table-header"]], inputs: { model: "model", border: "border", columnsWidth: ["columns-width", "columnsWidth"], layout: "layout", height: "height", center: "center" }, decls: 5, vars: 4, consts: [["widthTmp", ""], ["cellspacing", "0", "cellpadding", "0", "border", "0", 1, "el-table__header", 3, "ngStyle"], [3, "ngTemplateOutlet"], [4, "ngFor", "ngForOf"], [3, "width", 4, "ngFor", "ngForOf"], [3, "width"], [3, "class", "ngStyle", 4, "ngFor", "ngForOf"], [3, "ngStyle"], [1, "cell", 3, "ngStyle"]], template: function ElTableHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ElTableHeader_ng_template_0_Template, 1, 1, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "table", 1);
        ɵngcc0.ɵɵtemplate(3, ElTableHeader_ng_template_3_Template, 0, 0, "ng-template", 2);
        ɵngcc0.ɵɵtemplate(4, ElTableHeader_tr_4_Template, 2, 1, "tr", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(3, _c2));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.model);
    } }, directives: [ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf], pipes: [ɵngcc2.ElCSSValuePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElTableHeader, [{
        type: Component,
        args: [{
                selector: 'el-table-header',
                template: "\n    <ng-template #widthTmp>\n      <col *ngFor=\"let item of columnsWidth\" [width]=\"item.width\">\n    </ng-template>\n    <table class=\"el-table__header\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"\n      [ngStyle]=\"{ width: '100%' }\">\n      <ng-template [ngTemplateOutlet]=\"widthTmp\">\n      </ng-template>\n\n      <tr *ngFor=\"let tr of model\">\n        <th *ngFor=\"let th of tr\" [class]=\"makeClasses(th)\"\n            [ngStyle]=\"{ width: th.width | cssValue }\"\n            [attr.colspan]=\"getColspan(th)\" [attr.rowspan]=\"getRowspan(th)\">\n          <div class=\"cell\" [ngStyle]=\"{\n            width: th.width | cssValue,\n            'display': center ? 'block' : 'inline-block',\n            'text-align': center ? 'center' : 'unset' }\">{{th.label}}</div>\n        </th>\n      </tr>\n    </table>\n  "
            }]
    }], function () { return []; }, { model: [{
            type: Input
        }], border: [{
            type: Input
        }], columnsWidth: [{
            type: Input,
            args: ['columns-width']
        }], layout: [{
            type: Input
        }], height: [{
            type: Input
        }], center: [{
            type: Input
        }] }); })();
    return ElTableHeader;
}());
export { ElTableHeader };
function ElTableHeader_tsickle_Closure_declarations() {
    /** @type {?} */
    ElTableHeader.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElTableHeader.ctorParameters;
    /** @type {?} */
    ElTableHeader.propDecorators;
    /** @type {?} */
    ElTableHeader.prototype.model;
    /** @type {?} */
    ElTableHeader.prototype.layout;
    /** @type {?} */
    ElTableHeader.prototype.border;
    /** @type {?} */
    ElTableHeader.prototype.height;
    /** @type {?} */
    ElTableHeader.prototype.center;
    /** @type {?} */
    ElTableHeader.prototype.columnsWidth;
}

//# sourceMappingURL=header.js.map