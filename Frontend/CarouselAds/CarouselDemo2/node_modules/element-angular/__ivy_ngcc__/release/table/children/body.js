import { Component, Input, EventEmitter, Output, } from '@angular/core';
import { ElTableFormat } from '../utils/format';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../utils/format';
import * as ɵngcc2 from '@angular/platform-browser';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '../../shared/pipe/css-value';

function ElTableBody_tr_2_ng_container_2_td_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var td_r5 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(td_r5.value);
} }
function ElTableBody_tr_2_ng_container_2_td_1_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 11);
} if (rf & 2) {
    var td_r5 = ɵngcc0.ɵɵnextContext(2).$implicit;
    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("innerHtml", ctx_r10.renderHtml(td_r5.value), ɵngcc0.ɵɵsanitizeHtml);
} }
function ElTableBody_tr_2_ng_container_2_td_1_ng_container_6_ng_template_1_Template(rf, ctx) { }
var _c0 = function (a0, a1) { return { rowData: a0, index: a1 }; };
var _c1 = function (a0) { return { scope: a0 }; };
function ElTableBody_tr_2_ng_container_2_td_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElTableBody_tr_2_ng_container_2_td_1_ng_container_6_ng_template_1_Template, 0, 0, "ng-template", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    var _r8 = ɵngcc0.ɵɵreference(1);
    var td_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    var k_r2 = ɵngcc0.ɵɵnextContext().index;
    var ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", td_r5.value)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(5, _c1, ctx_r11.merge(_r8, ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r11.getFormatModel(k_r2), k_r2))));
} }
var _c2 = function (a0) { return { width: a0 }; };
var _c3 = function (a0) { return { "text-align": a0 }; };
function ElTableBody_tr_2_ng_container_2_td_1_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 6, 7);
    ɵngcc0.ɵɵlistener("mouseenter", function ElTableBody_tr_2_ng_container_2_td_1_Template_td_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); var _r8 = ɵngcc0.ɵɵreference(1); var k_r2 = ɵngcc0.ɵɵnextContext(2).index; var ctx_r17 = ɵngcc0.ɵɵnextContext(); ctx_r17.cellMouseActionHandle($event, true); return _r8.destroy = ctx_r17.destroyRowFunc(k_r2); })("mouseleave", function ElTableBody_tr_2_ng_container_2_td_1_Template_td_mouseleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); var ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20.cellMouseActionHandle($event, false); })("click", function ElTableBody_tr_2_ng_container_2_td_1_Template_td_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); var _r8 = ɵngcc0.ɵɵreference(1); var ctx_r21 = ɵngcc0.ɵɵnextContext(3); return ctx_r21.clickHandle($event, _r8); })("dblclick", function ElTableBody_tr_2_ng_container_2_td_1_Template_td_dblclick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); var _r8 = ɵngcc0.ɵɵreference(1); var ctx_r22 = ɵngcc0.ɵɵnextContext(3); return ctx_r22.doubleClickHandle($event, _r8); });
    ɵngcc0.ɵɵpipe(2, "cssValue");
    ɵngcc0.ɵɵelementStart(3, "div", 8);
    ɵngcc0.ɵɵtemplate(4, ElTableBody_tr_2_ng_container_2_td_1_ng_container_4_Template, 2, 1, "ng-container", 9);
    ɵngcc0.ɵɵtemplate(5, ElTableBody_tr_2_ng_container_2_td_1_div_5_Template, 1, 1, "div", 10);
    ɵngcc0.ɵɵtemplate(6, ElTableBody_tr_2_ng_container_2_td_1_ng_container_6_Template, 2, 7, "ng-container", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r23 = ɵngcc0.ɵɵnextContext();
    var i_r6 = ctx_r23.index;
    var td_r5 = ctx_r23.$implicit;
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap("el-table_1_column_" + (i_r6 + 1));
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(9, _c2, ɵngcc0.ɵɵpipeBind1(2, 7, td_r5.width)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(11, _c3, ctx_r7.center ? "center" : "unset"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.isTemplateRef(td_r5.value) && !td_r5._renderHTML);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.isTemplateRef(td_r5.value) && td_r5._renderHTML);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.isTemplateRef(td_r5.value));
} }
function ElTableBody_tr_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElTableBody_tr_2_ng_container_2_td_1_Template, 7, 13, "td", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var td_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !td_r5.hidden);
} }
function ElTableBody_tr_2_Template(rf, ctx) { if (rf & 1) {
    var _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr", 2, 3);
    ɵngcc0.ɵɵlistener("mouseenter", function ElTableBody_tr_2_Template_tr_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); var _r3 = ɵngcc0.ɵɵreference(1); return _r3.hover = true; })("mouseleave", function ElTableBody_tr_2_Template_tr_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); var _r3 = ɵngcc0.ɵɵreference(1); return _r3.hover = false; });
    ɵngcc0.ɵɵtemplate(2, ElTableBody_tr_2_ng_container_2_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var tr_r1 = ctx.$implicit;
    var k_r2 = ctx.index;
    var _r3 = ɵngcc0.ɵɵreference(1);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r0.makeRowClass(k_r2));
    ɵngcc0.ɵɵclassProp("hover-row", _r3.hover)("el-table__row--striped", ctx_r0.stripe && k_r2 % 2 === 1);
    ɵngcc0.ɵɵproperty("hidden", tr_r1.hidden);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", tr_r1);
} }
var ElTableBody = /** @class */ (function () {
    /**
     * @param {?} tableFormat
     * @param {?} sanitizer
     */
    function ElTableBody(tableFormat, sanitizer) {
        this.tableFormat = tableFormat;
        this.sanitizer = sanitizer;
        this.stripe = false;
        this.center = false;
        this.cellClick = new EventEmitter();
        this.cellDblClick = new EventEmitter();
        this.cellMouseEnter = new EventEmitter();
        this.cellMouseLeave = new EventEmitter();
        this.formatModel = [];
    }
    /**
     * @param {?} str
     * @return {?}
     */
    ElTableBody.prototype.renderHtml = function (str) {
        return this.sanitizer.bypassSecurityTrustHtml(str);
    };
    /**
     * @param {?} domHandle
     * @param {?} next
     * @return {?}
     */
    ElTableBody.prototype.merge = function (domHandle, next) {
        return Object.assign(domHandle, next);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    ElTableBody.prototype.isTemplateRef = function (content) {
        return content && typeof content === 'object';
    };
    /**
     * @return {?}
     */
    ElTableBody.prototype.getBodyWidth = function () {
        var /** @type {?} */ width = ElTableFormat.getCSSValue(this.layout.bodyWidth);
        if (!width)
            return this.layout.bodyWidth;
        return width - this.layout.scrollBarWidth;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ElTableBody.prototype.getFormatModel = function (index) {
        return this.formatModel[index];
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ElTableBody.prototype.destroyRowFunc = function (index) {
        var _this = this;
        return function () {
            _this.model.splice(index, 1);
            _this.formatModel = _this.tableFormat.formatRowData(_this.model);
        };
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ElTableBody.prototype.makeRowClass = function (index) {
        var /** @type {?} */ userRows = this.formatModel[index];
        var /** @type {?} */ userClass = this.rowClassName ? this.rowClassName(userRows, index) : '';
        return 'el-table__row ' + userClass;
    };
    /**
     * @param {?} event
     * @param {?} Ref
     * @return {?}
     */
    ElTableBody.prototype.doubleClickHandle = function (event, Ref) {
        Ref.event = event;
        this.cellDblClick.emit(Ref);
    };
    /**
     * @param {?} event
     * @param {?} Ref
     * @return {?}
     */
    ElTableBody.prototype.clickHandle = function (event, Ref) {
        Ref.event = event;
        this.cellClick.emit(Ref);
    };
    /**
     * @param {?} event
     * @param {?} isEnter
     * @return {?}
     */
    ElTableBody.prototype.cellMouseActionHandle = function (event, isEnter) {
        if (isEnter)
            return this.cellMouseEnter.emit(event);
        this.cellMouseLeave.emit(event);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ElTableBody.prototype.ngOnChanges = function (changes) {
        // not include model
        if (!changes || !changes.model)
            return;
        this.formatModel = this.tableFormat.formatRowData(this.model);
    };
    /**
     * @nocollapse
     */
    ElTableBody.ctorParameters = function () { return [
        { type: ElTableFormat, },
        { type: DomSanitizer, },
    ]; };
    ElTableBody.propDecorators = {
        'model': [{ type: Input, args: ['model',] },],
        'stripe': [{ type: Input },],
        'center': [{ type: Input },],
        'layout': [{ type: Input },],
        'rowClassName': [{ type: Input, args: ['row-class-name',] },],
        'cellClick': [{ type: Output, args: ['cell-click',] },],
        'cellDblClick': [{ type: Output, args: ['cell-dblclick',] },],
        'cellMouseEnter': [{ type: Output, args: ['cell-mouse-enter',] },],
        'cellMouseLeave': [{ type: Output, args: ['cell-mouse-leave',] },],
    };
ElTableBody.ɵfac = function ElTableBody_Factory(t) { return new (t || ElTableBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ElTableFormat), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer)); };
ElTableBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElTableBody, selectors: [["el-table-body"]], inputs: { stripe: "stripe", center: "center", model: "model", layout: "layout", rowClassName: ["row-class-name", "rowClassName"] }, outputs: { cellClick: "cell-click", cellDblClick: "cell-dblclick", cellMouseEnter: "cell-mouse-enter", cellMouseLeave: "cell-mouse-leave" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 6, consts: [["cellspacing", "0", "cellpadding", "0", "border", "0", 1, "el-table__body", 3, "ngStyle"], [3, "hidden", "class", "hover-row", "el-table__row--striped", "mouseenter", "mouseleave", 4, "ngFor", "ngForOf"], [3, "hidden", "mouseenter", "mouseleave"], ["tableRow", ""], [4, "ngFor", "ngForOf"], [3, "ngStyle", "class", "mouseenter", "mouseleave", "click", "dblclick", 4, "ngIf"], [3, "ngStyle", "mouseenter", "mouseleave", "click", "dblclick"], ["tdRef", ""], [1, "cell", 3, "ngStyle"], [4, "ngIf"], [3, "innerHtml", 4, "ngIf"], [3, "innerHtml"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function ElTableBody_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table", 0);
        ɵngcc0.ɵɵpipe(1, "cssValue");
        ɵngcc0.ɵɵtemplate(2, ElTableBody_tr_2_Template, 3, 8, "tr", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(4, _c2, ɵngcc0.ɵɵpipeBind1(1, 2, ctx.getBodyWidth())));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.model);
    } }, directives: [ɵngcc3.NgStyle, ɵngcc3.NgForOf, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet], pipes: [ɵngcc4.ElCSSValuePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElTableBody, [{
        type: Component,
        args: [{
                selector: 'el-table-body',
                template: "\n    <table class=\"el-table__body\" [ngStyle]=\"{ width: getBodyWidth() | cssValue }\"\n      cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n      <tr *ngFor=\"let tr of model; let k = index\" #tableRow\n        [hidden]=\"tr.hidden\"\n        [class]=\"makeRowClass(k)\"\n        [class.hover-row]=\"tableRow.hover\"\n        [class.el-table__row--striped]=\"stripe && k % 2 === 1\"\n        (mouseenter)=\"tableRow.hover = true\" (mouseleave)=\"tableRow.hover = false\">\n        <ng-container *ngFor=\"let td of tr; let i = index;\">\n          <td *ngIf=\"!td.hidden\" #tdRef\n            [ngStyle]=\"{ width: td.width | cssValue }\"\n            [class]=\"'el-table_1_column_' + (i + 1)\"\n            (mouseenter)=\"cellMouseActionHandle($event, true);tdRef.destroy = destroyRowFunc(k);\"\n            (mouseleave)=\"cellMouseActionHandle($event, false)\"\n            (click)=\"clickHandle($event, tdRef)\"\n            (dblclick)=\"doubleClickHandle($event, tdRef)\">\n            <div class=\"cell\" [ngStyle]=\"{ 'text-align': center ? 'center' : 'unset' }\">\n              <ng-container *ngIf=\"!isTemplateRef(td.value) && !td._renderHTML\">{{ td.value }}</ng-container>\n              <div *ngIf=\"!isTemplateRef(td.value) && td._renderHTML\" [innerHtml]=\"renderHtml(td.value)\"></div>\n              <ng-container *ngIf=\"isTemplateRef(td.value)\">\n                <ng-template [ngTemplateOutlet]=\"td.value\" [ngTemplateOutletContext]=\"{\n                scope: merge(tdRef, {rowData: getFormatModel(k), index: k})}\"></ng-template>\n              </ng-container>\n            </div>\n          </td>\n        </ng-container>\n      </tr>\n    </table>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.ElTableFormat }, { type: ɵngcc2.DomSanitizer }]; }, { stripe: [{
            type: Input
        }], center: [{
            type: Input
        }], cellClick: [{
            type: Output,
            args: ['cell-click']
        }], cellDblClick: [{
            type: Output,
            args: ['cell-dblclick']
        }], cellMouseEnter: [{
            type: Output,
            args: ['cell-mouse-enter']
        }], cellMouseLeave: [{
            type: Output,
            args: ['cell-mouse-leave']
        }], model: [{
            type: Input,
            args: ['model']
        }], layout: [{
            type: Input
        }], rowClassName: [{
            type: Input,
            args: ['row-class-name']
        }] }); })();
    return ElTableBody;
}());
export { ElTableBody };
function ElTableBody_tsickle_Closure_declarations() {
    /** @type {?} */
    ElTableBody.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElTableBody.ctorParameters;
    /** @type {?} */
    ElTableBody.propDecorators;
    /** @type {?} */
    ElTableBody.prototype.model;
    /** @type {?} */
    ElTableBody.prototype.stripe;
    /** @type {?} */
    ElTableBody.prototype.center;
    /** @type {?} */
    ElTableBody.prototype.layout;
    /** @type {?} */
    ElTableBody.prototype.rowClassName;
    /** @type {?} */
    ElTableBody.prototype.cellClick;
    /** @type {?} */
    ElTableBody.prototype.cellDblClick;
    /** @type {?} */
    ElTableBody.prototype.cellMouseEnter;
    /** @type {?} */
    ElTableBody.prototype.cellMouseLeave;
    /** @type {?} */
    ElTableBody.prototype.formatModel;
    /** @type {?} */
    ElTableBody.prototype.tableFormat;
    /** @type {?} */
    ElTableBody.prototype.sanitizer;
}

//# sourceMappingURL=body.js.map