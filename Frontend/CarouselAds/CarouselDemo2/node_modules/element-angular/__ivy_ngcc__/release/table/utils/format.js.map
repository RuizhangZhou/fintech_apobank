{"version":3,"file":"format.js","sources":["../../../src/table/utils/format.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;;AAEpB;AAEgB,IAFhB;AAA2B,IAwC3B,CAAC;AACD,IAxCA;AACA;AACI;AAEA,OADD;AACH,IADG,yBAAA,GACH,UADG,GAAA;AACA,QACC,EAAE,CAAC,CAAC,GADC,KAAO,MAAA,CAAO;AAAC,YAAA,MAAA,CAAO,IAAA,CAAA;AAAC,QAE5B,EAAE,CAAC,CAAC,CADC,MAAC,CAAM,KAAC,CAAK,CAAC,GAAC,CAAG,CAAC;AAAC,YAAA,MAAA,CAAO,CAAA,GAAE,CAAA;AACnC,QACC,EAAE,CAAC,CAAC,MADC,CAAM,GAAC,CAAG,CAAC,QAAC,CAAQ,IAAC,CAAI,CAAC,CAAC,CAAA;AAAC,YAE/B,MAAM,CADC,CAAA,MAAE,CAAM,GAAC,CAAG,CAAC,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC,CAAA;AACrC,QACC,CAAC;AACL,IAAE,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IAAA,qCAJG,GAIH,UAJG,SAAA;AACA,QAIC,IAAM,gBAAgB,CAJhB,WAAA,GAAwB,CAAA,OAAE,EAAQ,OAAA,EAAS,OAAA,CAAQ,CAAA;AAG1C,QAEf,IAAM,gBAAgB,CAJhB,YAAA,GAAoB,SAAA,CAAU,GAAC,CAAG,UAAC,GAAC,EAAI,KAAA;AAEf,YAG7B,IAAM,gBAAgB,CAJhB,UAAA,GAAkB,EAAA,CAAA;AACH,YAIrB,GAAG,CAJC,OAAC,CAAO,UAAC,IAAM;AAAI,gBAKrB,OAAA,MAAM,CAJC,IAAC,CAAI,IAAC,CAAI,CAAC,OAAC,CAAO,UAAC,CAAG;AAAI,oBAKhC,EAAE,CAAC,CAAC,WAJC,CAAW,OAAC,CAAO,CAAC,CAAC,GAAG,CAAA,CAAE,CAAC,CAAA;AAAC,wBAK/B,UAAU,CAJC,CAAC,CAAC,GAAG,IAAA,CAAK,CAAC,CAAC,CAAA;AAAC,oBAK1B,CAAC;AACX,gBAAM,CAAC,CAJC;AAAE,YAAF,CAAA,CAAC,CAAA;AAAC,YAKJ,UAAU,CAJC,OAAC,CAAO,GAAG,KAAA,CAAA;AAAC,YAKvB,MAAM,CAJC,UAAA,CAAA;AAAC,QAKV,CAAC,CAJC,CAAA;AAAC,QAKH,MAAM,CAJC,YAAA,CAAA;AACT,IAIA,CAAC,CAAD;IAFK,JAEJ,IAKH;AACA;CARO,GAAoC,JAU3C,OADG;MAJH,EAJE,IAAA,EAAM,UAAA,EAAW,OAKlB,jCAID,IANC,4BAAA,GAAA,cAAA,OAAA,EAOA,EAPA,CAOA;;;;;gDAAC;AACF,IAAA,oBAAC;AAED,CA1CA,AAwCC,IAAA;AACD,SAvCC,aAAA;AAwCD;AACA,IAAA,gBAAgB;AAChB,IAAA,aAAa,CAAC,UAAU,CAAC;AACzB,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,aAAa,CAAC,cAAc,CAAC;AAC7B,CAAC;AACD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TableColumnDataItem } from '../table.interface';\nexport class ElTableFormat {\n/**\n * @param {?} val\n * @return {?}\n */\nstatic getCSSValue(val: string | number): number {\n    if (val === 'auto') return null\n    if (!Number.isNaN(+val)) return +val\n    if (String(val).endsWith('px')) {\n      return +String(val).split('px')[0]\n    }\n  }\n/**\n * @param {?} tableRows\n * @return {?}\n */\nformatRowData(tableRows: TableColumnDataItem[][]): any {\n    const /** @type {?} */ elTableKeys: string[] = ['value', 'width', 'index']\n    const /** @type {?} */ tableRowsMap: any = tableRows.map((row, index) => {\n      const /** @type {?} */ currentRow: any = {}\n      row.forEach((item: TableColumnDataItem) =>\n        Object.keys(item).forEach((r: any) => {\n          if (elTableKeys.indexOf(r) < 0) {\n            currentRow[r] = item[r]\n          }\n      }))\n      currentRow['index'] = index\n      return currentRow\n    })\n    return tableRowsMap\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ElTableFormat_tsickle_Closure_declarations() {\n/** @type {?} */\nElTableFormat.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElTableFormat.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}