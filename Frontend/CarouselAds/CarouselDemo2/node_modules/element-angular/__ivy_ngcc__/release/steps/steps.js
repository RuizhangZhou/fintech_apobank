import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var ElSteps = /** @class */ (function () {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    function ElSteps(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.direction = 'horizontal'; // enum: vertical/horizontal
        this.active = 0;
        this.simple = false;
        this.processStatus = 'process';
        this.finishStatus = 'finish'; // enum: wait/process/finish/error/success
        this.alignCenter = false;
        this.offset = 0;
        this.stepsLength = 0;
    }
    /**
     * @return {?}
     */
    ElSteps.prototype.ngOnInit = function () {
        var _this = this;
        var /** @type {?} */ children = this.el.nativeElement.querySelectorAll('el-step');
        if (!children || !children.length) {
            return console.warn('steps components required children');
        }
        children.forEach(function (el, index) {
            _this.renderer.setAttribute(el, 'el-index', String(index));
        });
        this.stepsLength = children.length;
        // this.offset = children[this.stepsLength - 1].getBoundingClientRect().width / (this.stepsLength - 1)
    };
    /**
     * @nocollapse
     */
    ElSteps.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    ElSteps.propDecorators = {
        'space': [{ type: Input },],
        'direction': [{ type: Input },],
        'active': [{ type: Input },],
        'simple': [{ type: Input },],
        'processStatus': [{ type: Input, args: ['process-status',] },],
        'finishStatus': [{ type: Input, args: ['finish-status',] },],
        'alignCenter': [{ type: Input, args: ['align-center',] },],
    };
ElSteps.ɵfac = function ElSteps_Factory(t) { return new (t || ElSteps)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ElSteps.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElSteps, selectors: [["el-steps"]], inputs: { direction: "direction", active: "active", simple: "simple", processStatus: ["process-status", "processStatus"], finishStatus: ["finish-status", "finishStatus"], alignCenter: ["align-center", "alignCenter"], space: "space" }, ngContentSelectors: _c0, decls: 2, vars: 4, template: function ElSteps_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap("el-steps " + (!ctx.simple ? "el-steps--" + ctx.direction : ""));
        ɵngcc0.ɵɵclassProp("el-steps--simple", ctx.simple);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElSteps, [{
        type: Component,
        args: [{
                selector: 'el-steps',
                template: "\n    <div [class]=\"'el-steps ' + (!simple ? 'el-steps--' + direction : '')\"\n      [class.el-steps--simple]=\"simple\">\n      <ng-content></ng-content>\n    </div>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { direction: [{
            type: Input
        }], active: [{
            type: Input
        }], simple: [{
            type: Input
        }], processStatus: [{
            type: Input,
            args: ['process-status']
        }], finishStatus: [{
            type: Input,
            args: ['finish-status']
        }], alignCenter: [{
            type: Input,
            args: ['align-center']
        }], space: [{
            type: Input
        }] }); })();
    return ElSteps;
}());
export { ElSteps };
function ElSteps_tsickle_Closure_declarations() {
    /** @type {?} */
    ElSteps.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElSteps.ctorParameters;
    /** @type {?} */
    ElSteps.propDecorators;
    /** @type {?} */
    ElSteps.prototype.space;
    /** @type {?} */
    ElSteps.prototype.direction;
    /** @type {?} */
    ElSteps.prototype.active;
    /** @type {?} */
    ElSteps.prototype.simple;
    /** @type {?} */
    ElSteps.prototype.processStatus;
    /** @type {?} */
    ElSteps.prototype.finishStatus;
    /** @type {?} */
    ElSteps.prototype.alignCenter;
    /** @type {?} */
    ElSteps.prototype.offset;
    /** @type {?} */
    ElSteps.prototype.stepsLength;
    /** @type {?} */
    ElSteps.prototype.el;
    /** @type {?} */
    ElSteps.prototype.renderer;
}

//# sourceMappingURL=steps.js.map