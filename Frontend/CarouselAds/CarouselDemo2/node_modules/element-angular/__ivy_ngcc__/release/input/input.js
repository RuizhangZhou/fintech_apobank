import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '../form/form-item';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/forms';

var _c0 = ["prepend"];
var _c1 = ["append"];
var _c2 = ["textarea"];
function ElInput_ng_container_1_div_1_ng_template_1_Template(rf, ctx) { }
function ElInput_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtemplate(1, ElInput_ng_container_1_div_1_ng_template_1_Template, 0, 0, "ng-template", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.prepend);
} }
function ElInput_ng_container_1_span_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap("el-input__icon " + ("el-icon-" + ctx_r7.icon) + (ctx_r7.iconClick ? " is-clickable " : " ") + (ctx_r7.iconClass ? ctx_r7.iconClass : ""));
    ɵngcc0.ɵɵclassProp("icon-disabled", ctx_r7.elDisabled);
    ɵngcc0.ɵɵattribute("disabled", ctx_r7.elDisabled);
} }
function ElInput_ng_container_1_span_2_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵlistener("click", function ElInput_ng_container_1_span_2_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.iconClick.emit($event); })("mouseenter", function ElInput_ng_container_1_span_2_Template_span_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.iconMouseEnter.emit($event); })("mouseleave", function ElInput_ng_container_1_span_2_Template_span_mouseleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.iconMouseLeave.emit($event); })("mousedown", function ElInput_ng_container_1_span_2_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.iconMousedown.emit($event); })("mouseup", function ElInput_ng_container_1_span_2_Template_span_mouseup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.iconMouseup.emit($event); });
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtemplate(2, ElInput_ng_container_1_span_2_i_2_Template, 1, 5, "i", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("icon-pointer", ctx_r3.showPointer())("icon-disabled", ctx_r3.elDisabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.icon);
} }
function ElInput_ng_container_1_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 11);
} }
function ElInput_ng_container_1_div_5_ng_template_1_Template(rf, ctx) { }
function ElInput_ng_container_1_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, ElInput_ng_container_1_div_5_ng_template_1_Template, 0, 0, "ng-template", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.append);
} }
function ElInput_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElInput_ng_container_1_div_1_Template, 2, 1, "div", 1);
    ɵngcc0.ɵɵtemplate(2, ElInput_ng_container_1_span_2_Template, 3, 5, "span", 2);
    ɵngcc0.ɵɵelementStart(3, "input", 3);
    ɵngcc0.ɵɵlistener("ngModelChange", function ElInput_ng_container_1_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.handleInput($event); })("focus", function ElInput_ng_container_1_Template_input_focus_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.focus.emit($event); })("blur", function ElInput_ng_container_1_Template_input_blur_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.blur.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, ElInput_ng_container_1_i_4_Template, 1, 0, "i", 4);
    ɵngcc0.ɵɵtemplate(5, ElInput_ng_container_1_div_5_Template, 2, 1, "div", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.prepend);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.icon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("autocomplete", ctx_r0.autoComplete)("value", ctx_r0.value)("name", ctx_r0.name)("type", ctx_r0.nativeType)("placeholder", ctx_r0.placeholder)("autofocus", ctx_r0.autofocus)("disabled", ctx_r0.elDisabled)("readonly", ctx_r0.readonly)("maxlength", ctx_r0.maxlength)("minlength", ctx_r0.minlength)("ngModel", ctx_r0.model);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.validating);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.append);
} }
function ElInput_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    var _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "textarea", 13, 14);
    ɵngcc0.ɵɵlistener("input", function ElInput_ng_container_2_Template_textarea_input_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.handleInput($event.target.value); })("focus", function ElInput_ng_container_2_Template_textarea_focus_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.focus.emit($event); })("blur", function ElInput_ng_container_2_Template_textarea_blur_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.blur.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ctx_r1.textareaStyles);
    ɵngcc0.ɵɵproperty("value", ctx_r1.value)("name", ctx_r1.name)("placeholder", ctx_r1.placeholder)("autofocus", ctx_r1.autofocus)("disabled", ctx_r1.elDisabled)("readonly", ctx_r1.readonly)("maxlength", ctx_r1.maxlength)("minlength", ctx_r1.minlength)("ngModel", ctx_r1.model);
} }
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ContentChild, ElementRef, forwardRef, ViewChild, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ElInputPoprs } from './input-props';
import { getTextareaHeight } from './help';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isParentTag } from '../shared/utils/index';
import { ElFormItem } from '../form/form-item';
var ElInput = /** @class */ (function (_super) {
    __extends(ElInput, _super);
    /**
     * @param {?} sanitizer
     * @param {?} el
     * @param {?} form
     */
    function ElInput(sanitizer, el, form) {
        var _this = _super.call(this) || this;
        _this.sanitizer = sanitizer;
        _this.el = el;
        _this.form = form;
        _this.controlChange = function () { };
        _this.controlTouch = function () { };
        return _this;
    }
    /**
     * @return {?}
     */
    ElInput.prototype.makeTextareaStyles = function () {
        if (!this.autosize || this.type !== 'textarea')
            return;
        var /** @type {?} */ height = getTextareaHeight(this.textarea.nativeElement, this.autosize.minRows, this.autosize.maxRows);
        var /** @type {?} */ styles = "resize: " + this.resize + "; height: " + height + ";";
        this.textareaStyles = this.sanitizer.bypassSecurityTrustStyle(styles);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    ElInput.prototype.handleInput = function (val) {
        var _this = this;
        this.model = val;
        this.modelChange.emit(val);
        this.controlChange(val);
        var /** @type {?} */ timer = setTimeout(function () {
            _this.makeTextareaStyles();
            clearTimeout(timer);
        }, 0);
    };
    /**
     * @return {?}
     */
    ElInput.prototype.showPointer = function () {
        var /** @type {?} */ clickEvent = !!(this.iconClick.observers && this.iconClick.observers.length);
        var /** @type {?} */ mouseEvent = !!(this.iconMousedown.observers && this.iconMousedown.observers.length);
        return clickEvent || mouseEvent;
    };
    /**
     * @return {?}
     */
    ElInput.prototype.ngOnInit = function () {
        var _this = this;
        // auto follow form status
        var /** @type {?} */ parentIsForm = isParentTag(this.el.nativeElement, 'el-form-item');
        if (parentIsForm) {
            var /** @type {?} */ iconStatus_1 = {
                error: 'circle-close', success: 'circle-check', validating: 'circle-validating',
            };
            this.iconClass = 'el-input__validateIcon';
            this.form.statusSubscriber.push(function (status) {
                _this.icon = iconStatus_1[status] || '';
            });
        }
        if (this.value && !this.model) {
            this.model = this.value;
        }
    };
    /**
     * @return {?}
     */
    ElInput.prototype.ngAfterViewInit = function () {
        var _this = this;
        // no content required
        if (this.type === 'textarea') {
            return setTimeout(function () {
                _this.makeTextareaStyles();
            }, 0);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ElInput.prototype.writeValue = function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElInput.prototype.registerOnChange = function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElInput.prototype.registerOnTouched = function (fn) {
        this.controlTouch = fn;
    };
    /**
     * @nocollapse
     */
    ElInput.ctorParameters = function () { return [
        { type: DomSanitizer, },
        { type: ElementRef, },
        { type: ElFormItem, },
    ]; };
    ElInput.propDecorators = {
        'prepend': [{ type: ContentChild, args: ['prepend',] },],
        'append': [{ type: ContentChild, args: ['append',] },],
        'textarea': [{ type: ViewChild, args: ['textarea',] },],
    };
ElInput.ɵfac = function ElInput_Factory(t) { return new (t || ElInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ElFormItem)); };
ElInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElInput, selectors: [["el-input"]], contentQueries: function ElInput_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.prepend = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.append = _t.first);
    } }, viewQuery: function ElInput_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textarea = _t.first);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ElInput; }),
                multi: true
            }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 12, consts: [[4, "ngIf"], ["class", "el-input-group__prepend", 4, "ngIf"], ["class", "el-input__suffix", 3, "icon-pointer", "icon-disabled", "click", "mouseenter", "mouseleave", "mousedown", "mouseup", 4, "ngIf"], [1, "el-input__inner", 3, "autocomplete", "value", "name", "type", "placeholder", "autofocus", "disabled", "readonly", "maxlength", "minlength", "ngModel", "ngModelChange", "focus", "blur"], ["class", "el-input__icon el-icon-loading", 4, "ngIf"], ["class", "el-input-group__append", 4, "ngIf"], [1, "el-input-group__prepend"], [3, "ngTemplateOutlet"], [1, "el-input__suffix", 3, "click", "mouseenter", "mouseleave", "mousedown", "mouseup"], [1, "el-input__suffix-inner"], [3, "class", "icon-disabled", 4, "ngIf"], [1, "el-input__icon", "el-icon-loading"], [1, "el-input-group__append"], [1, "el-textarea__inner", 3, "value", "name", "placeholder", "autofocus", "disabled", "readonly", "maxlength", "minlength", "ngModel", "input", "focus", "blur"], ["textarea", ""]], template: function ElInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, ElInput_ng_container_1_Template, 6, 15, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(2, ElInput_ng_container_2_Template, 3, 11, "ng-container", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap((ctx.type === "text" ? "el-input" : "el-textarea") + (ctx.size ? " el-input--" + ctx.size : "") + " " + ctx.parentClass);
        ɵngcc0.ɵɵclassProp("is-disabled", ctx.elDisabled)("el-input-group", ctx.prepend || ctx.append)("el-input-group--append", ctx.append)("el-input-group--prepend", ctx.prepend);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "text");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "textarea");
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.DefaultValueAccessor, ɵngcc4.MaxLengthValidator, ɵngcc4.MinLengthValidator, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc3.NgTemplateOutlet], styles: [".icon-disabled[_ngcontent-%COMP%] { cursor: not-allowed; } .icon-disabled[_ngcontent-%COMP%]:before { cursor: not-allowed; }\n    .icon-pointer[_ngcontent-%COMP%] { cursor: pointer; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElInput, [{
        type: Component,
        args: [{
                selector: 'el-input',
                styles: ["\n    .icon-disabled { cursor: not-allowed; } .icon-disabled:before { cursor: not-allowed; }\n    .icon-pointer { cursor: pointer; }"],
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ElInput; }),
                        multi: true
                    }],
                template: "\n    <div [class]=\"(type === 'text' ? 'el-input' : 'el-textarea') +\n    (size ? ' el-input--' + size : '') + ' ' + parentClass\"\n      [class.is-disabled]=\"elDisabled\"\n      [class.el-input-group]=\"prepend || append\"\n      [class.el-input-group--append]=\"append\"\n      [class.el-input-group--prepend]=\"prepend\">\n      <ng-container *ngIf=\"type === 'text'\">\n        \n        <div class=\"el-input-group__prepend\" *ngIf=\"prepend\">\n          <ng-template [ngTemplateOutlet]=\"prepend\">\n          </ng-template>\n        </div>\n        \n        <span class=\"el-input__suffix\" *ngIf=\"icon\" (click)=\"iconClick.emit($event)\"\n          (mouseenter)=\"iconMouseEnter.emit($event)\" (mouseleave)=\"iconMouseLeave.emit($event)\"\n          (mousedown)=\"iconMousedown.emit($event)\" (mouseup)=\"iconMouseup.emit($event)\"\n          [class.icon-pointer]=\"showPointer()\"\n          [class.icon-disabled]=\"elDisabled\">\n          <span class=\"el-input__suffix-inner\">\n            <i [class]=\"'el-input__icon ' + ('el-icon-' + icon) + (iconClick ? ' is-clickable ' : ' ')\n              + (iconClass ? iconClass : '')\"\n              [attr.disabled]=\"elDisabled\"\n              [class.icon-disabled]=\"elDisabled\"\n              *ngIf=\"icon\"></i>\n          </span>\n        </span>\n        <input class=\"el-input__inner\"\n          [autocomplete]=\"autoComplete\" [value]=\"value\" [name]=\"name\" [type]=\"nativeType\"\n          [placeholder]=\"placeholder\" [autofocus]=\"autofocus\"\n          [disabled]=\"elDisabled\" [readonly]=\"readonly\"\n          [maxlength]=\"maxlength\" [minlength]=\"minlength\"\n          [ngModel]=\"model\" (ngModelChange)=\"handleInput($event)\"\n          (focus)=\"focus.emit($event)\" (blur)=\"blur.emit($event)\">\n        <i *ngIf=\"validating\" class=\"el-input__icon el-icon-loading\"></i>\n        \n        <div class=\"el-input-group__append\" *ngIf=\"append\">\n          <ng-template [ngTemplateOutlet]=\"append\">\n          </ng-template>\n        </div>\n      </ng-container>\n      \n      <ng-container *ngIf=\"type === 'textarea'\">\n        <textarea class=\"el-textarea__inner\" #textarea\n          [style]=\"textareaStyles\"\n          [value]=\"value\" [name]=\"name\"\n          [placeholder]=\"placeholder\" [autofocus]=\"autofocus\"\n          [disabled]=\"elDisabled\" [readonly]=\"readonly\"\n          [maxlength]=\"maxlength\" [minlength]=\"minlength\"\n          [ngModel]=\"model\" (input)=\"handleInput($event.target.value)\"\n          (focus)=\"focus.emit($event)\" (blur)=\"blur.emit($event)\"></textarea>\n      </ng-container>\n    </div>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ElFormItem }]; }, { prepend: [{
            type: ContentChild,
            args: ['prepend']
        }], append: [{
            type: ContentChild,
            args: ['append']
        }], textarea: [{
            type: ViewChild,
            args: ['textarea']
        }] }); })();
    return ElInput;
}(ElInputPoprs));
export { ElInput };
function ElInput_tsickle_Closure_declarations() {
    /** @type {?} */
    ElInput.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElInput.ctorParameters;
    /** @type {?} */
    ElInput.propDecorators;
    /** @type {?} */
    ElInput.prototype.prepend;
    /** @type {?} */
    ElInput.prototype.append;
    /** @type {?} */
    ElInput.prototype.textarea;
    /** @type {?} */
    ElInput.prototype.textareaStyles;
    /** @type {?} */
    ElInput.prototype.controlChange;
    /** @type {?} */
    ElInput.prototype.controlTouch;
    /** @type {?} */
    ElInput.prototype.sanitizer;
    /** @type {?} */
    ElInput.prototype.el;
    /** @type {?} */
    ElInput.prototype.form;
}

//# sourceMappingURL=input.js.map