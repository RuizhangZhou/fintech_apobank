import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, } from '@angular/core';
import { removeNgTag } from '../shared/utils/index';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';

function ElButton_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 3);
} }
function ElButton_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap("el-icon-" + ctx_r1.icon);
} }
var _c0 = ["*"];
var ElButton = /** @class */ (function () {
    /**
     * @param {?} el
     * @param {?} sanitizer
     */
    function ElButton(el, sanitizer) {
        this.el = el;
        this.sanitizer = sanitizer;
        this.elDisabled = false;
        this.themeType = '';
        this.nativeType = 'button';
        this.size = '';
        this.icon = '';
        this.loading = false;
        this.plain = false;
        this.round = false;
        this.autofocus = false;
        this.style = '';
        this.nativeClass = '';
        this.click = new EventEmitter();
    }
    Object.defineProperty(ElButton.prototype, "disabled", {
        /**
         * @param {?} val
         * @return {?}
         */
        set: function (val) {
            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    ElButton.prototype.clickHandle = function ($event) {
        this.click.emit($event);
    };
    /**
     * @return {?}
     */
    ElButton.prototype.extendStyles = function () {
        return this.sanitizer.bypassSecurityTrustStyle(this.style);
    };
    /**
     * @return {?}
     */
    ElButton.prototype.ngOnInit = function () {
        removeNgTag(this.el.nativeElement);
    };
    /**
     * @nocollapse
     */
    ElButton.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: DomSanitizer, },
    ]; };
    ElButton.propDecorators = {
        'disabled': [{ type: Input },],
        'elDisabled': [{ type: Input },],
        'themeType': [{ type: Input, args: ['type',] },],
        'nativeType': [{ type: Input, args: ['native-type',] },],
        'size': [{ type: Input },],
        'icon': [{ type: Input },],
        'loading': [{ type: Input },],
        'plain': [{ type: Input },],
        'round': [{ type: Input },],
        'autofocus': [{ type: Input },],
        'style': [{ type: Input },],
        'nativeClass': [{ type: Input, args: ['class',] },],
        'click': [{ type: Output },],
    };
ElButton.ɵfac = function ElButton_Factory(t) { return new (t || ElButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer)); };
ElButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElButton, selectors: [["el-button"]], inputs: { elDisabled: "elDisabled", themeType: ["type", "themeType"], nativeType: ["native-type", "nativeType"], size: "size", icon: "icon", loading: "loading", plain: "plain", round: "round", autofocus: "autofocus", style: "style", nativeClass: ["class", "nativeClass"], disabled: "disabled" }, outputs: { click: "click" }, ngContentSelectors: _c0, decls: 4, vars: 17, consts: [[3, "disabled", "type", "autofocus", "click"], ["class", "el-icon-loading", 4, "ngIf"], [3, "class", 4, "ngIf"], [1, "el-icon-loading"]], template: function ElButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function ElButton_Template_button_click_0_listener($event) { return ctx.clickHandle($event); });
        ɵngcc0.ɵɵtemplate(1, ElButton_i_1_Template, 1, 0, "i", 1);
        ɵngcc0.ɵɵtemplate(2, ElButton_i_2_Template, 1, 2, "i", 2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ctx.extendStyles());
        ɵngcc0.ɵɵclassMap("el-button " + (ctx.themeType ? " el-button--" + ctx.themeType : "") + (ctx.size ? " el-button--" + ctx.size : "") + " " + ctx.nativeClass);
        ɵngcc0.ɵɵclassProp("is-disabled", ctx.elDisabled)("is-loading", ctx.loading)("is-plain", ctx.plain)("is-round", ctx.round);
        ɵngcc0.ɵɵproperty("disabled", ctx.elDisabled)("type", ctx.nativeType)("autofocus", ctx.autofocus);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon && !ctx.loading);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElButton, [{
        type: Component,
        args: [{
                selector: 'el-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n  <button (click)=\"clickHandle($event)\"\n    [class]=\"'el-button ' + (themeType ? ' el-button--' + themeType : '')\n      + (size ? ' el-button--' + size : '') + ' ' + nativeClass\"\n    [class.is-disabled]=\"elDisabled\"\n    [class.is-loading]=\"loading\"\n    [class.is-plain]=\"plain\"\n    [class.is-round]=\"round\"\n    [disabled]=\"elDisabled\"\n    [type]=\"nativeType\"\n    [style]=\"extendStyles()\"\n    [autofocus]=\"autofocus\">\n    <i class=\"el-icon-loading\" *ngIf=\"loading\"></i>\n    <i [class]=\"'el-icon-' + icon\" *ngIf=\"icon && !loading\"></i>\n    <ng-content></ng-content>\n  </button>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.DomSanitizer }]; }, { elDisabled: [{
            type: Input
        }], themeType: [{
            type: Input,
            args: ['type']
        }], nativeType: [{
            type: Input,
            args: ['native-type']
        }], size: [{
            type: Input
        }], icon: [{
            type: Input
        }], loading: [{
            type: Input
        }], plain: [{
            type: Input
        }], round: [{
            type: Input
        }], autofocus: [{
            type: Input
        }], style: [{
            type: Input
        }], nativeClass: [{
            type: Input,
            args: ['class']
        }], click: [{
            type: Output
        }], disabled: [{
            type: Input
        }] }); })();
    return ElButton;
}());
export { ElButton };
function ElButton_tsickle_Closure_declarations() {
    /** @type {?} */
    ElButton.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElButton.ctorParameters;
    /** @type {?} */
    ElButton.propDecorators;
    /** @type {?} */
    ElButton.prototype.elDisabled;
    /** @type {?} */
    ElButton.prototype.themeType;
    /** @type {?} */
    ElButton.prototype.nativeType;
    /** @type {?} */
    ElButton.prototype.size;
    /** @type {?} */
    ElButton.prototype.icon;
    /** @type {?} */
    ElButton.prototype.loading;
    /** @type {?} */
    ElButton.prototype.plain;
    /** @type {?} */
    ElButton.prototype.round;
    /** @type {?} */
    ElButton.prototype.autofocus;
    /** @type {?} */
    ElButton.prototype.style;
    /** @type {?} */
    ElButton.prototype.nativeClass;
    /** @type {?} */
    ElButton.prototype.click;
    /** @type {?} */
    ElButton.prototype.el;
    /** @type {?} */
    ElButton.prototype.sanitizer;
}

//# sourceMappingURL=button.js.map