import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';

function Elprogress_div_1_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r3.percentage, "%");
} }
var _c0 = function (a0) { return { height: a0 }; };
function Elprogress_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵtemplate(3, Elprogress_div_1_div_3_Template, 2, 1, "div", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r0.strokeWidth + "px"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ctx_r0.colorStryles());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showText && ctx_r0.textInside);
} }
var _c1 = function (a0, a1) { return { height: a0, width: a1 }; };
function Elprogress_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 9);
    ɵngcc0.ɵɵelement(2, "path", 10);
    ɵngcc0.ɵɵelement(3, "path", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(8, _c1, ctx_r1.width + "px", ctx_r1.width + "px"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("d", ctx_r1.makeTrackPath())("stroke-width", ctx_r1.relativeStrokeWidth);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ctx_r1.svgStyles());
    ɵngcc0.ɵɵattribute("d", ctx_r1.makeTrackPath())("stroke", ctx_r1.makeStroke())("stroke-width", ctx_r1.relativeStrokeWidth);
} }
function Elprogress_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r4.percentage, "%");
} }
function Elprogress_div_3_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r5.makeIconClass());
} }
var _c2 = function (a0) { return { fontSize: a0 }; };
function Elprogress_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtemplate(1, Elprogress_div_3_ng_container_1_Template, 2, 1, "ng-container", 13);
    ɵngcc0.ɵɵtemplate(2, Elprogress_div_3_i_2_Template, 1, 2, "i", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(3, _c2, ctx_r2.progressTextSize + "px"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.status);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.status);
} }
var Elprogress = /** @class */ (function () {
    /**
     * @param {?} sanitizer
     */
    function Elprogress(sanitizer) {
        this.sanitizer = sanitizer;
        this.percentage = 0;
        this.type = 'line';
        this.strokeWidth = 6;
        this.textInside = false;
        this.showText = true;
        // only in type=circle
        this.width = 126;
    }
    /**
     * @return {?}
     */
    Elprogress.prototype.progressTextSize = function () {
        return this.type === 'line' ? 12 + this.strokeWidth * 0.4
            : this.width * 0.111111 + 2;
    };
    /**
     * @return {?}
     */
    Elprogress.prototype.makeIconClass = function () {
        if (this.type === 'line') {
            return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-cross';
        }
        return this.status === 'success' ? 'el-icon-check' : 'el-icon-close';
    };
    /**
     * @return {?}
     */
    Elprogress.prototype.makeStroke = function () {
        if (this.status === 'success')
            return '#13ce66';
        if (this.status === 'exception')
            return '#ff4949';
        return '#20a0ff';
    };
    /**
     * @return {?}
     */
    Elprogress.prototype.makeTrackPath = function () {
        var /** @type {?} */ radius = ~~(50 - Number.parseFloat(this.relativeStrokeWidth) / 2);
        return "M 50 50 m 0 -" + radius + " a " + radius + " " + radius + " 0 1 1 0 " + radius * 2 + " a " + radius + " " + radius + " 0 1 1 0 -" + radius * 2;
    };
    /**
     * @return {?}
     */
    Elprogress.prototype.svgStyles = function () {
        var /** @type {?} */ perimeter = (50 - parseFloat(this.relativeStrokeWidth) / 2) * 2 * Math.PI;
        var /** @type {?} */ styles = "stroke-dasharray: " + perimeter + "px, " + perimeter + "px;";
        styles += "stroke-dashoffset: " + (1 - this.percentage / 100) * perimeter + "px;";
        styles += 'transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease';
        return this.sanitizer.bypassSecurityTrustStyle(styles);
    };
    /**
     * @return {?}
     */
    Elprogress.prototype.colorStryles = function () {
        var /** @type {?} */ styles = "width: " + this.percentage + "%;" +
            (this.activeColor ? "background-color: " + this.activeColor + ";" : '');
        return this.sanitizer.bypassSecurityTrustStyle(styles);
    };
    /**
     * @return {?}
     */
    Elprogress.prototype.ngOnInit = function () {
        this.percentage > 100 && (this.percentage = 100);
        this.relativeStrokeWidth = (this.strokeWidth / this.width * 100).toFixed(1);
    };
    /**
     * @nocollapse
     */
    Elprogress.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    Elprogress.propDecorators = {
        'percentage': [{ type: Input },],
        'type': [{ type: Input },],
        'status': [{ type: Input },],
        'strokeWidth': [{ type: Input, args: ['stroke-width',] },],
        'textInside': [{ type: Input, args: ['text-inside',] },],
        'showText': [{ type: Input, args: ['show-text',] },],
        'width': [{ type: Input },],
        'activeColor': [{ type: Input, args: ['active-color',] },],
    };
Elprogress.ɵfac = function Elprogress_Factory(t) { return new (t || Elprogress)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer)); };
Elprogress.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Elprogress, selectors: [["el-progress"]], inputs: { percentage: "percentage", type: "type", strokeWidth: ["stroke-width", "strokeWidth"], textInside: ["text-inside", "textInside"], showText: ["show-text", "showText"], width: "width", status: "status", activeColor: ["active-color", "activeColor"] }, decls: 4, vars: 9, consts: [["class", "el-progress-bar", 4, "ngIf"], ["class", "el-progress-circle", 3, "ngStyle", 4, "ngIf"], ["class", "el-progress__text", 3, "ngStyle", 4, "ngIf"], [1, "el-progress-bar"], [1, "el-progress-bar__outer", 3, "ngStyle"], [1, "el-progress-bar__inner"], ["class", "el-progress-bar__innerText", 4, "ngIf"], [1, "el-progress-bar__innerText"], [1, "el-progress-circle", 3, "ngStyle"], ["viewBox", "0 0 100 100"], ["stroke", "#e5e9f2", "fill", "none", 1, "el-progress-circle__track"], ["stroke-linecap", "round", "fill", "none", 1, "el-progress-circle__path"], [1, "el-progress__text", 3, "ngStyle"], [4, "ngIf"], [3, "class", 4, "ngIf"]], template: function Elprogress_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, Elprogress_div_1_Template, 4, 6, "div", 0);
        ɵngcc0.ɵɵtemplate(2, Elprogress_div_2_Template, 4, 11, "div", 1);
        ɵngcc0.ɵɵtemplate(3, Elprogress_div_3_Template, 3, 5, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap("el-progress el-progress--" + ctx.type + (ctx.status ? " is-" + ctx.status : ""));
        ɵngcc0.ɵɵclassProp("el-progress--without-text", !ctx.showText)("el-progress--text-inside", ctx.textInside);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "line");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type === "circle");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showText && !ctx.textInside);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgStyle], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Elprogress, [{
        type: Component,
        args: [{
                selector: 'el-progress',
                template: "\n    <div [class]=\"'el-progress el-progress--' + type + (status ? ' is-' + status : '')\"\n      [class.el-progress--without-text]=\"!showText\"\n      [class.el-progress--text-inside]=\"textInside\">\n      <div class=\"el-progress-bar\" *ngIf=\"type === 'line'\">\n        <div class=\"el-progress-bar__outer\" [ngStyle]=\"{height: strokeWidth + 'px'}\">\n          <div class=\"el-progress-bar__inner\" [style]=\"colorStryles()\">\n            <div class=\"el-progress-bar__innerText\" *ngIf=\"showText && textInside\">{{percentage}}%</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"el-progress-circle\" *ngIf=\"type === 'circle'\" [ngStyle]=\"{height: width + 'px', width: width + 'px'}\">\n        <svg viewBox=\"0 0 100 100\">\n          <path class=\"el-progress-circle__track\" [attr.d]=\"makeTrackPath()\" stroke=\"#e5e9f2\"\n            [attr.stroke-width]=\"relativeStrokeWidth\" fill=\"none\"></path>\n          <path class=\"el-progress-circle__path\" [attr.d]=\"makeTrackPath()\" stroke-linecap=\"round\" [attr.stroke]=\"makeStroke()\"\n            [attr.stroke-width]=\"relativeStrokeWidth\" fill=\"none\" [style]=\"svgStyles()\"></path>\n        </svg>\n      </div>\n      <div class=\"el-progress__text\" *ngIf=\"showText && !textInside\"\n           [ngStyle]=\"{fontSize: progressTextSize + 'px'}\">\n        <ng-container *ngIf=\"!status\">{{percentage}}%</ng-container>\n        <i *ngIf=\"status\" [class]=\"makeIconClass()\"></i>\n      </div>\n    </div>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.DomSanitizer }]; }, { percentage: [{
            type: Input
        }], type: [{
            type: Input
        }], strokeWidth: [{
            type: Input,
            args: ['stroke-width']
        }], textInside: [{
            type: Input,
            args: ['text-inside']
        }], showText: [{
            type: Input,
            args: ['show-text']
        }], width: [{
            type: Input
        }], status: [{
            type: Input
        }], activeColor: [{
            type: Input,
            args: ['active-color']
        }] }); })();
    return Elprogress;
}());
export { Elprogress };
function Elprogress_tsickle_Closure_declarations() {
    /** @type {?} */
    Elprogress.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    Elprogress.ctorParameters;
    /** @type {?} */
    Elprogress.propDecorators;
    /** @type {?} */
    Elprogress.prototype.percentage;
    /** @type {?} */
    Elprogress.prototype.type;
    /** @type {?} */
    Elprogress.prototype.status;
    /** @type {?} */
    Elprogress.prototype.strokeWidth;
    /** @type {?} */
    Elprogress.prototype.textInside;
    /** @type {?} */
    Elprogress.prototype.showText;
    /** @type {?} */
    Elprogress.prototype.width;
    /** @type {?} */
    Elprogress.prototype.activeColor;
    /** @type {?} */
    Elprogress.prototype.relativeStrokeWidth;
    /** @type {?} */
    Elprogress.prototype.sanitizer;
}

//# sourceMappingURL=progress.js.map