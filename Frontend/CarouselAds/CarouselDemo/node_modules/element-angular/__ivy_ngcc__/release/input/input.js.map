{"version":3,"file":"input.js","sources":["../../src/input/input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit, Component, ContentChild, ElementRef, forwardRef, OnInit, TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { SafeStyle, DomSanitizer } from '@angular/platform-browser';\nimport { ElInputPoprs } from './input-props';\nimport { getTextareaHeight } from './help';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isParentTag } from '../shared/utils/index';\nimport { ElFormItem } from '../form/form-item';\nexport class ElInput extends ElInputPoprs implements OnInit, AfterViewInit, ControlValueAccessor {\n  \n   prepend: TemplateRef<any>\n   append: TemplateRef<any>\n   textarea: any\n  textareaStyles: SafeStyle\n/**\n * @param {?} sanitizer\n * @param {?} el\n * @param {?} form\n */\nconstructor(\nprivate sanitizer: DomSanitizer,\nprivate el: ElementRef,\nprivate form: ElFormItem,\n  ) {\n    super()\n  }\n/**\n * @return {?}\n */\nmakeTextareaStyles(): void {\n    if (!this.autosize || this.type !== 'textarea') return\n    const /** @type {?} */ height: string = getTextareaHeight(this.textarea.nativeElement, this.autosize.minRows, this.autosize.maxRows)\n    const /** @type {?} */ styles: string = `resize: ${this.resize}; height: ${height};`\n    this.textareaStyles = this.sanitizer.bypassSecurityTrustStyle(styles)\n  }\n/**\n * @param {?} val\n * @return {?}\n */\nhandleInput(val: string): void {\n    this.model = val\n    this.modelChange.emit(val)\n    this.controlChange(val)\n    const /** @type {?} */ timer: any = setTimeout(() => {\n      this.makeTextareaStyles()\n      clearTimeout(timer)\n    }, 0)\n  }\n/**\n * @return {?}\n */\nshowPointer(): boolean {\n    const /** @type {?} */ clickEvent: boolean = !!(this.iconClick.observers && this.iconClick.observers.length)\n    const /** @type {?} */ mouseEvent: boolean = !!(this.iconMousedown.observers && this.iconMousedown.observers.length)\n    \n    return clickEvent || mouseEvent\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    // auto follow form status\n    const /** @type {?} */ parentIsForm: boolean = isParentTag(this.el.nativeElement, 'el-form-item')\n    if (parentIsForm) {\n      const /** @type {?} */ iconStatus = {\n        error: 'circle-close', success: 'circle-check', validating: 'circle-validating',\n      }\n      this.iconClass = 'el-input__validateIcon'\n      this.form.statusSubscriber.push((status: string) => {\n        this.icon = iconStatus[status] || ''\n      })\n    }\n    \n    if (this.value && !this.model) {\n      this.model = this.value\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): any {\n    // no content required\n    if (this.type === 'textarea') {\n      return setTimeout(() => {\n        this.makeTextareaStyles()\n      }, 0)\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.model = value\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void {\n    this.controlChange = fn\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: Function): void {\n    this.controlTouch = fn\n  }\nprivate controlChange: Function = () => {}\nprivate controlTouch: Function = () => {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-input',\n  styles: [`\n    .icon-disabled { cursor: not-allowed; } .icon-disabled:before { cursor: not-allowed; }\n    .icon-pointer { cursor: pointer; }`],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ElInput),\n    multi: true\n  }],\n  template: `\n    <div [class]=\"(type === 'text' ? 'el-input' : 'el-textarea') +\n    (size ? ' el-input--' + size : '') + ' ' + parentClass\"\n      [class.is-disabled]=\"elDisabled\"\n      [class.el-input-group]=\"prepend || append\"\n      [class.el-input-group--append]=\"append\"\n      [class.el-input-group--prepend]=\"prepend\">\n      <ng-container *ngIf=\"type === 'text'\">\n        \n        <div class=\"el-input-group__prepend\" *ngIf=\"prepend\">\n          <ng-template [ngTemplateOutlet]=\"prepend\">\n          </ng-template>\n        </div>\n        \n        <span class=\"el-input__suffix\" *ngIf=\"icon\" (click)=\"iconClick.emit($event)\"\n          (mouseenter)=\"iconMouseEnter.emit($event)\" (mouseleave)=\"iconMouseLeave.emit($event)\"\n          (mousedown)=\"iconMousedown.emit($event)\" (mouseup)=\"iconMouseup.emit($event)\"\n          [class.icon-pointer]=\"showPointer()\"\n          [class.icon-disabled]=\"elDisabled\">\n          <span class=\"el-input__suffix-inner\">\n            <i [class]=\"'el-input__icon ' + ('el-icon-' + icon) + (iconClick ? ' is-clickable ' : ' ')\n              + (iconClass ? iconClass : '')\"\n              [attr.disabled]=\"elDisabled\"\n              [class.icon-disabled]=\"elDisabled\"\n              *ngIf=\"icon\"></i>\n          </span>\n        </span>\n        <input class=\"el-input__inner\"\n          [autocomplete]=\"autoComplete\" [value]=\"value\" [name]=\"name\" [type]=\"nativeType\"\n          [placeholder]=\"placeholder\" [autofocus]=\"autofocus\"\n          [disabled]=\"elDisabled\" [readonly]=\"readonly\"\n          [maxlength]=\"maxlength\" [minlength]=\"minlength\"\n          [ngModel]=\"model\" (ngModelChange)=\"handleInput($event)\"\n          (focus)=\"focus.emit($event)\" (blur)=\"blur.emit($event)\">\n        <i *ngIf=\"validating\" class=\"el-input__icon el-icon-loading\"></i>\n        \n        <div class=\"el-input-group__append\" *ngIf=\"append\">\n          <ng-template [ngTemplateOutlet]=\"append\">\n          </ng-template>\n        </div>\n      </ng-container>\n      \n      <ng-container *ngIf=\"type === 'textarea'\">\n        <textarea class=\"el-textarea__inner\" #textarea\n          [style]=\"textareaStyles\"\n          [value]=\"value\" [name]=\"name\"\n          [placeholder]=\"placeholder\" [autofocus]=\"autofocus\"\n          [disabled]=\"elDisabled\" [readonly]=\"readonly\"\n          [maxlength]=\"maxlength\" [minlength]=\"minlength\"\n          [ngModel]=\"model\" (input)=\"handleInput($event.target.value)\"\n          (focus)=\"focus.emit($event)\" (blur)=\"blur.emit($event)\"></textarea>\n      </ng-container>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, },\n{type: ElementRef, },\n{type: ElFormItem, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'prepend': [{ type: ContentChild, args: ['prepend', ] },],\n'append': [{ type: ContentChild, args: ['append', ] },],\n'textarea': [{ type: ViewChild, args: ['textarea', ] },],\n};\n}\n\nfunction ElInput_tsickle_Closure_declarations() {\n/** @type {?} */\nElInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElInput.ctorParameters;\n/** @type {?} */\nElInput.propDecorators;\n/** @type {?} */\nElInput.prototype.prepend;\n/** @type {?} */\nElInput.prototype.append;\n/** @type {?} */\nElInput.prototype.textarea;\n/** @type {?} */\nElInput.prototype.textareaStyles;\n/** @type {?} */\nElInput.prototype.controlChange;\n/** @type {?} */\nElInput.prototype.controlTouch;\n/** @type {?} */\nElInput.prototype.sanitizer;\n/** @type {?} */\nElInput.prototype.el;\n/** @type {?} */\nElInput.prototype.form;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}