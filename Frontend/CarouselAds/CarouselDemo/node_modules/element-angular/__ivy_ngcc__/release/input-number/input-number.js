import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

function ElInputNumber_span_1_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵlistener("click", function ElInputNumber_span_1_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.decreaseHandle(false); });
    ɵngcc0.ɵɵelement(1, "i", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-disabled", ctx_r0.minDisabled);
} }
function ElInputNumber_span_2_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵlistener("click", function ElInputNumber_span_2_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.decreaseHandle(true); });
    ɵngcc0.ɵɵelement(1, "i", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-disabled", ctx_r1.maxDisabled);
} }
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, forwardRef } from '@angular/core';
import { ElInputNumberPoprs } from './input-number-props';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var ElInputNumber = /** @class */ (function (_super) {
    __extends(ElInputNumber, _super);
    function ElInputNumber() {
        var _this = _super.call(this) || this;
        _this.minDisabled = false;
        _this.maxDisabled = false;
        _this.controlChange = function () { };
        _this.controlTouch = function () { };
        return _this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ElInputNumber.prototype.changeHandle = function (value) {
        var /** @type {?} */ oldValue = this.model;
        this.model = value;
        if (Number.isNaN(+this.model)) {
            this.model = oldValue;
            return;
        }
        this.maxDisabled = value > this.max;
        this.minDisabled = value < this.min;
        if (this.maxDisabled)
            return this.dispatchModel(this.max);
        if (this.minDisabled)
            return this.dispatchModel(this.min);
        this.modelChange.emit(value);
    };
    /**
     * @param {?} limit
     * @return {?}
     */
    ElInputNumber.prototype.dispatchModel = function (limit) {
        var _this = this;
        var /** @type {?} */ timer = setTimeout(function () {
            _this.model = limit;
            _this.modelChange.emit(limit);
            clearTimeout(timer);
        }, this.debounce);
    };
    /**
     * @param {?=} calcType
     * @return {?}
     */
    ElInputNumber.prototype.decreaseHandle = function (calcType) {
        if (calcType === void 0) { calcType = true; }
        if (this.elDisabled)
            return;
        var /** @type {?} */ step = calcType ? this.step : 0 - this.step;
        var /** @type {?} */ val = Number(this.model) + step;
        if (Number.isNaN(val))
            return;
        this.maxDisabled = val > this.max;
        this.minDisabled = val < this.min;
        if (!this.maxDisabled && !this.minDisabled) {
            this.model = val;
            this.modelChange.emit(this.model);
            this.controlChange(this.model);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ElInputNumber.prototype.writeValue = function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElInputNumber.prototype.registerOnChange = function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ElInputNumber.prototype.registerOnTouched = function (fn) {
        this.controlTouch = fn;
    };
    /**
     * @nocollapse
     */
    ElInputNumber.ctorParameters = function () { return []; };
ElInputNumber.ɵfac = function ElInputNumber_Factory(t) { return new (t || ElInputNumber)(); };
ElInputNumber.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElInputNumber, selectors: [["el-input-number"]], features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ElInputNumber; }),
                multi: true
            }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 20, consts: [["class", "el-input-number__decrease", "role", "button", 3, "is-disabled", "click", 4, "ngIf"], ["class", "el-input-number__increase", "role", "button", 3, "is-disabled", "click", 4, "ngIf"], ["autocomplete", "off", "role", "spinbutton", "type", "number", "rows", "2", "aria-valuenow", "1", 1, "el-input__inner", "el-input-spin-button", 3, "disabled", "value", "ngModel", "ngModelChange"], ["role", "button", 1, "el-input-number__decrease", 3, "click"], [1, "el-icon-minus"], ["role", "button", 1, "el-input-number__increase", 3, "click"], [1, "el-icon-plus"]], template: function ElInputNumber_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtemplate(1, ElInputNumber_span_1_Template, 2, 2, "span", 0);
        ɵngcc0.ɵɵtemplate(2, ElInputNumber_span_2_Template, 2, 2, "span", 1);
        ɵngcc0.ɵɵelementStart(3, "div");
        ɵngcc0.ɵɵelementStart(4, "input", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function ElInputNumber_Template_input_ngModelChange_4_listener($event) { return ctx.changeHandle($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap("el-input-number" + (ctx.size ? " el-input-number--" + ctx.size : ""));
        ɵngcc0.ɵɵclassProp("is-disabled", ctx.elDisabled)("is-without-controls", !ctx.controls);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.controls);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.controls);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMap("el-input " + (ctx.size ? " el-input--" + ctx.size : ""));
        ɵngcc0.ɵɵclassProp("is-disabled", ctx.elDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.elDisabled)("value", ctx.model)("ngModel", ctx.model);
        ɵngcc0.ɵɵattribute("max", ctx.max)("min", ctx.min)("aria-valuemax", ctx.max)("aria-valuemin", ctx.min)("aria-disabled", ctx.elDisabled);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.NumberValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel], styles: [".el-input-spin-button[_ngcontent-%COMP%]::-webkit-inner-spin-button { visibility: hidden; -webkit-appearance: none; }\n    .el-input-spin-button[_ngcontent-%COMP%] { -moz-appearance: textfield; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElInputNumber, [{
        type: Component,
        args: [{
                selector: 'el-input-number',
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ElInputNumber; }),
                        multi: true
                    }],
                styles: ["\n    .el-input-spin-button::-webkit-inner-spin-button { visibility: hidden; -webkit-appearance: none; }\n    .el-input-spin-button { -moz-appearance: textfield; }\n  "],
                template: "\n    <div [class]=\"'el-input-number' + (size ? ' el-input-number--' + size : '')\"\n      [class.is-disabled]=\"elDisabled\" [class.is-without-controls]=\"!controls\">\n      <span *ngIf=\"controls\" class=\"el-input-number__decrease\" role=\"button\"\n        [class.is-disabled]=\"minDisabled\" (click)=\"decreaseHandle(false)\">\n        <i class=\"el-icon-minus\"></i>\n      </span>\n      <span *ngIf=\"controls\" class=\"el-input-number__increase\" role=\"button\"\n        [class.is-disabled]=\"maxDisabled\" (click)=\"decreaseHandle(true)\">\n        <i class=\"el-icon-plus\"></i>\n      </span>\n\n      <div [class]=\"'el-input ' + (size ? ' el-input--' + size : '')\" [class.is-disabled]=\"elDisabled\">\n        <input class=\"el-input__inner el-input-spin-button  \" autocomplete=\"off\" role=\"spinbutton\"\n          [attr.max]=\"max\" [attr.min]=\"min\" [attr.aria-valuemax]=\"max\" [attr.aria-valuemin]=\"min\"\n          [disabled]=\"elDisabled\" [value]=\"model\" [ngModel]=\"model\" (ngModelChange)=\"changeHandle($event)\"\n          type=\"number\" rows=\"2\" aria-valuenow=\"1\" [attr.aria-disabled]=\"elDisabled\">\n      </div>\n    </div>\n  "
            }]
    }], function () { return []; }, null); })();
    return ElInputNumber;
}(ElInputNumberPoprs));
export { ElInputNumber };
function ElInputNumber_tsickle_Closure_declarations() {
    /** @type {?} */
    ElInputNumber.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElInputNumber.ctorParameters;
    /** @type {?} */
    ElInputNumber.prototype.minDisabled;
    /** @type {?} */
    ElInputNumber.prototype.maxDisabled;
    /** @type {?} */
    ElInputNumber.prototype.controlChange;
    /** @type {?} */
    ElInputNumber.prototype.controlTouch;
}

//# sourceMappingURL=input-number.js.map