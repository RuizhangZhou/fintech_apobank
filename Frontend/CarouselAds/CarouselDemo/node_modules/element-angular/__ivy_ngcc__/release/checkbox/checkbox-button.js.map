{"version":3,"file":"checkbox-button.js","sources":["../../src/checkbox/checkbox-button.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component, Input, Output, EventEmitter, OnInit,\n  ElementRef, Optional, ViewChild, AfterViewInit, ViewEncapsulation,\n} from '@angular/core';\nimport { ElCheckboxGroup } from './checkbox-group';\nimport { isParentTag, removeNgTag } from '../shared/utils/index';\nimport { SafeStyle, DomSanitizer } from '@angular/platform-browser';\nexport class ElCheckboxButton implements OnInit, AfterViewInit {\n  \n   content: any\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {   // todo, is discarded.\n    console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.')\n  }\n   elDisabled: boolean = false\n   label: string\n   model: any\n   indeterminate: boolean = false\n   checked: boolean = false\n   name: string\n   trueLabel: string | number\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  labels: any[]\n  parentIsGroup: boolean = false\n  isFocus: boolean = false\n  showLabel: boolean = false\n  // special key\n  size: string\n/**\n * @param {?} hostGroup\n * @param {?} el\n * @param {?} domSanitizer\n */\nconstructor(\nprivate hostGroup: ElCheckboxGroup,\nprivate el: ElementRef,\nprivate domSanitizer: DomSanitizer,\n  ) {\n  }\n/**\n * @return {?}\n */\nactiveStyle(): SafeStyle {\n    if (!this.hostGroup) return this.domSanitizer.bypassSecurityTrustStyle('')\n    const /** @type {?} */ styles: string = `backgroundColor: ${this.hostGroup.fill};` +\n      `borderColor: ${this.hostGroup.fill};color: ${this.hostGroup.textColor};` +\n      `box-shadow: -1px 0 0 0 ${this.hostGroup.fill};`\n    return this.domSanitizer.bypassSecurityTrustStyle(this.checked && !this.elDisabled ? styles : '')\n  }\n/**\n * @return {?}\n */\nisChecked(): boolean {\n    if (this.parentIsGroup) {\n      return this.hostGroup.model.indexOf(this.label) > -1\n    }\n    return this.model\n  }\n/**\n * @param {?} t\n * @return {?}\n */\nchangeHandle(t: boolean): void {\n    this.parentIsGroup && this.hostGroup.updateModelFromChildren(t, this.label)\n    this.model = t\n    this.checked = this.isChecked()\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    const /** @type {?} */ nativeElement = this.el.nativeElement\n    this.parentIsGroup = isParentTag(nativeElement, 'el-checkbox-group')\n    removeNgTag(nativeElement)\n    // update model from group\n    if (this.parentIsGroup) {\n      this.labels = this.hostGroup.model\n      this.size = this.hostGroup.size\n      this.model = this.isChecked()\n      // update handle\n      this.hostGroup.subscriber.push(() => this.model = this.isChecked())\n    }\n    this.checked = this.isChecked()\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n    const /** @type {?} */ contentText = this.content && this.content.nativeElement.innerText\n    setTimeout(() => {\n      this.showLabel = !contentText || contentText.length < 1\n    }, 0)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-checkbox-button',\n  template: `\n    <label [class]=\"'el-checkbox-button' + (size ? ' el-checkbox-button--' + size : '') \"\n      role=\"checkbox\"\n      [class.is-disabled]=\"elDisabled\" [class.is-focus]=\"isFocus\"\n      [class.is-indeterminate]=\"indeterminate\" [class.is-checked]=\"checked\">\n      <input class=\"el-checkbox-button__original\" type=\"checkbox\"\n        [disabled]=\"elDisabled\" [value]=\"label\" [name]=\"name\"\n        [ngModel]=\"model\" (ngModelChange)=\"changeHandle($event)\"\n        (focus)=\"isFocus = true\" (blur)=\"isFocus = false\">\n      <span class=\"el-checkbox-button__inner\"\n        [style]=\"activeStyle()\">\n        <ng-container *ngIf=\"showLabel\">{{label}}</ng-container>\n        <span *ngIf=\"!showLabel\" #content>\n          <ng-content></ng-content>\n        </span>\n      </span>\n    </label>\n  `,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElCheckboxGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ViewChild, args: ['content', ] },],\n'disabled': [{ type: Input },],\n'elDisabled': [{ type: Input },],\n'label': [{ type: Input },],\n'model': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n'checked': [{ type: Input },],\n'name': [{ type: Input },],\n'trueLabel': [{ type: Input, args: ['true-label', ] },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElCheckboxButton_tsickle_Closure_declarations() {\n/** @type {?} */\nElCheckboxButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElCheckboxButton.ctorParameters;\n/** @type {?} */\nElCheckboxButton.propDecorators;\n/** @type {?} */\nElCheckboxButton.prototype.content;\n/** @type {?} */\nElCheckboxButton.prototype.elDisabled;\n/** @type {?} */\nElCheckboxButton.prototype.label;\n/** @type {?} */\nElCheckboxButton.prototype.model;\n/** @type {?} */\nElCheckboxButton.prototype.indeterminate;\n/** @type {?} */\nElCheckboxButton.prototype.checked;\n/** @type {?} */\nElCheckboxButton.prototype.name;\n/** @type {?} */\nElCheckboxButton.prototype.trueLabel;\n/** @type {?} */\nElCheckboxButton.prototype.modelChange;\n/** @type {?} */\nElCheckboxButton.prototype.labels;\n/** @type {?} */\nElCheckboxButton.prototype.parentIsGroup;\n/** @type {?} */\nElCheckboxButton.prototype.isFocus;\n/** @type {?} */\nElCheckboxButton.prototype.showLabel;\n/** @type {?} */\nElCheckboxButton.prototype.size;\n/** @type {?} */\nElCheckboxButton.prototype.hostGroup;\n/** @type {?} */\nElCheckboxButton.prototype.el;\n/** @type {?} */\nElCheckboxButton.prototype.domSanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}