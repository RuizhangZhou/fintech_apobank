import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './upload.request';
import * as ɵngcc2 from '@angular/platform-browser';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from './upload.list';
import * as ɵngcc5 from '../button/button';
import * as ɵngcc6 from './upload.dragger';

var _c0 = ["trigger"];
var _c1 = ["dragger"];
var _c2 = ["tip"];
var _c3 = ["input"];
function ElUpload_ng_template_0_el_upload_list_0_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "el-upload-list", 5);
    ɵngcc0.ɵɵlistener("remove", function ElUpload_ng_template_0_el_upload_list_0_Template_el_upload_list_remove_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.removeHandle($event); })("preview", function ElUpload_ng_template_0_el_upload_list_0_Template_el_upload_list_preview_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.lifecycle.preview($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("files", ctx_r9.files)("list-type", ctx_r9.listType)("elDisabled", ctx_r9.elDisabled);
} }
function ElUpload_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ElUpload_ng_template_0_el_upload_list_0_Template, 1, 3, "el-upload-list", 4);
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showFileList);
} }
function ElUpload_ng_template_2_el_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "el-button", 10);
    ɵngcc0.ɵɵtext(1, "\u70B9\u51FB\u4E0A\u4F20");
    ɵngcc0.ɵɵelementEnd();
} }
function ElUpload_ng_template_2_ng_container_2_ng_template_1_Template(rf, ctx) { }
function ElUpload_ng_template_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElUpload_ng_template_2_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r14.trigger);
} }
function ElUpload_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵlistener("click", function ElUpload_ng_template_2_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.clickHandle(); });
    ɵngcc0.ɵɵtemplate(1, ElUpload_ng_template_2_el_button_1_Template, 2, 0, "el-button", 7);
    ɵngcc0.ɵɵtemplate(2, ElUpload_ng_template_2_ng_container_2_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementStart(3, "input", 8, 9);
    ɵngcc0.ɵɵlistener("change", function ElUpload_ng_template_2_Template_input_change_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.changeHandle($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap("el-upload el-upload--" + ctx_r3.listType);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.trigger);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.trigger);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("accept", ctx_r3.accept)("name", ctx_r3.name)("multiple", ctx_r3.multiple);
} }
function ElUpload_el_upload_dragger_4_ng_template_1_Template(rf, ctx) { }
function ElUpload_el_upload_dragger_4_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "el-upload-dragger", 12);
    ɵngcc0.ɵɵlistener("change", function ElUpload_el_upload_dragger_4_Template_el_upload_dragger_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.changeHandle($event); });
    ɵngcc0.ɵɵtemplate(1, ElUpload_el_upload_dragger_4_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    var _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵproperty("elDisabled", ctx_r4.elDisabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function ElUpload_ng_container_5_ng_template_1_Template(rf, ctx) { }
function ElUpload_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElUpload_ng_container_5_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
function ElUpload_ng_container_6_ng_template_1_Template(rf, ctx) { }
function ElUpload_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElUpload_ng_container_6_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    var _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function ElUpload_ng_container_7_ng_template_1_Template(rf, ctx) { }
function ElUpload_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElUpload_ng_container_7_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.tip);
} }
function ElUpload_ng_container_8_ng_template_1_Template(rf, ctx) { }
function ElUpload_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ElUpload_ng_container_8_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    var _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r0);
} }
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ContentChild, ViewChild, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpResponse } from '@angular/common/http';
import { ElUploadProps } from './upload.props';
import { ElUploadRequest } from './upload.request';
var ElUpload = /** @class */ (function (_super) {
    __extends(ElUpload, _super);
    /**
     * @param {?} request
     * @param {?} sanitizer
     */
    function ElUpload(request, sanitizer) {
        var _this = _super.call(this) || this;
        _this.request = request;
        _this.sanitizer = sanitizer;
        _this.files = [];
        return _this;
    }
    /**
     * @return {?}
     */
    ElUpload.generateID = function () {
        return Math.random().toString(16).substr(2, 8);
    };
    /**
     * @param {?} response
     * @return {?}
     */
    ElUpload.updatePercentage = function (response) {
        var loaded = response.loaded, total = response.total;
        if (loaded === undefined || !total)
            return 0;
        return Math.round(loaded / total * 100);
    };
    /**
     * @return {?}
     */
    ElUpload.prototype.clickHandle = function () {
        if (this.elDisabled)
            return;
        this.input.nativeElement.click();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ElUpload.prototype.changeHandle = function (event) {
        var _this = this;
        var /** @type {?} */ files = ((event.target)).files;
        if (!files || !files.length)
            return;
        var /** @type {?} */ checkedFiles = this.multiple ? Array.from(files) : [files[0]];
        this.input.nativeElement.value = null;
        checkedFiles.forEach(function (file) {
            var /** @type {?} */ next = {
                id: ElUpload.generateID(),
                name: file.name,
                status: 'ready',
                size: file.size,
                percentage: 0,
                raw: file,
                url: _this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file))
            };
            _this.files.push(next);
            _this.updateFile(next);
            _this.uploadFilter(file) === false ? _this.removeHandle(next) : _this.upload(next);
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ElUpload.prototype.upload = function (file) {
        var _this = this;
        file.status = 'uploading';
        this.updateFile(file);
        this.request.upload(this.action, file.raw)
            .subscribe(function (event) {
            file.percentage = ElUpload.updatePercentage(event);
            file.percentage && _this.lifecycle.progress(file, file.percentage);
            if (event instanceof HttpResponse) {
                _this.lifecycle.success(Object.assign(file, { status: 'success' }), event);
            }
            _this.updateFile(file);
        }, function (err) {
            file.status = 'fail';
            _this.lifecycle.error(file, err);
            _this.removeHandle(file);
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ElUpload.prototype.removeHandle = function (file) {
        this.lifecycle.remove(file);
        var /** @type {?} */ index = this.files.findIndex(function (_a) {
            var id = _a.id;
            return file.id === id;
        });
        this.files.splice(index, 1);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ElUpload.prototype.updateFile = function (file) {
        var /** @type {?} */ index = this.files.findIndex(function (_a) {
            var id = _a.id;
            return file.id === id;
        });
        if (!index)
            return;
        this.files[index] = file;
    };
    /**
     * @return {?}
     */
    ElUpload.prototype.ngOnInit = function () {
        var _this = this;
        this.request
            .setHeader(this.headers)
            .setCredentials(this.withCredentials)
            .setFileName(this.name)
            .addExtraData(this.data);
        this.fileList.forEach(function (file) {
            _this.files.push({
                id: ElUpload.generateID(),
                name: file.name,
                status: 'success',
                raw: null, size: null,
                url: _this.sanitizer.bypassSecurityTrustUrl(file.url),
            });
        });
    };
    /**
     * @nocollapse
     */
    ElUpload.ctorParameters = function () { return [
        { type: ElUploadRequest, },
        { type: DomSanitizer, },
    ]; };
    ElUpload.propDecorators = {
        'trigger': [{ type: ContentChild, args: ['trigger',] },],
        'dragger': [{ type: ContentChild, args: ['dragger',] },],
        'tip': [{ type: ContentChild, args: ['tip',] },],
        'input': [{ type: ViewChild, args: ['input',] },],
    };
ElUpload.ɵfac = function ElUpload_Factory(t) { return new (t || ElUpload)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ElUploadRequest), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomSanitizer)); };
ElUpload.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElUpload, selectors: [["el-upload"]], contentQueries: function ElUpload_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dragger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tip = _t.first);
    } }, viewQuery: function ElUpload_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 5, consts: [["uploadList", ""], ["triggerBlock", ""], [3, "elDisabled", "change", 4, "ngIf"], [4, "ngIf"], [3, "files", "list-type", "elDisabled", "remove", "preview", 4, "ngIf"], [3, "files", "list-type", "elDisabled", "remove", "preview"], [3, "click"], ["size", "small", "type", "primary", 4, "ngIf"], ["type", "file", "name", "file", 1, "el-upload__input", 3, "accept", "name", "multiple", "change"], ["input", ""], ["size", "small", "type", "primary"], [3, "ngTemplateOutlet"], [3, "elDisabled", "change"]], template: function ElUpload_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ElUpload_ng_template_0_Template, 1, 1, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, ElUpload_ng_template_2_Template, 5, 7, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, ElUpload_el_upload_dragger_4_Template, 2, 2, "el-upload-dragger", 2);
        ɵngcc0.ɵɵtemplate(5, ElUpload_ng_container_5_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(6, ElUpload_ng_container_6_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(7, ElUpload_ng_container_7_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵtemplate(8, ElUpload_ng_container_8_Template, 2, 1, "ng-container", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.drag);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.listType === "picture-card");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.drag);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tip);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.listType !== "picture-card");
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.ElUploadList, ɵngcc5.ElButton, ɵngcc3.NgTemplateOutlet, ɵngcc6.ElUploadDragger], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElUpload, [{
        type: Component,
        args: [{
                selector: 'el-upload',
                template: "\n    <ng-template #uploadList>\n      <el-upload-list [files]=\"files\"  *ngIf=\"showFileList\"\n        [list-type]=\"listType\" [elDisabled]=\"elDisabled\"\n        (remove)=\"removeHandle($event)\" (preview)=\"lifecycle.preview($event)\">\n      </el-upload-list>\n    </ng-template>\n    \n    <ng-template #triggerBlock>\n      <div [class]=\"'el-upload el-upload--' + listType\" (click)=\"clickHandle()\">\n        <el-button *ngIf=\"!trigger\" size=\"small\" type=\"primary\">\u70B9\u51FB\u4E0A\u4F20</el-button>\n        <ng-container *ngIf=\"trigger\">\n          <ng-template [ngTemplateOutlet]=\"trigger\"></ng-template>\n        </ng-container>\n        <input class=\"el-upload__input\" type=\"file\" name=\"file\" #input\n          [accept]=\"accept\" [name]=\"name\" [multiple]=\"multiple\"\n          (change)=\"changeHandle($event)\">\n      </div>\n    </ng-template>\n    \n    <el-upload-dragger *ngIf=\"drag\" [elDisabled]=\"elDisabled\" (change)=\"changeHandle($event)\">\n      <ng-template [ngTemplateOutlet]=\"triggerBlock\"></ng-template>\n    </el-upload-dragger>\n    \n    <ng-container *ngIf=\"listType === 'picture-card'\">\n      <ng-template [ngTemplateOutlet]=\"uploadList\"></ng-template>\n    </ng-container>\n    <ng-container *ngIf=\"!drag\">\n      <ng-template [ngTemplateOutlet]=\"triggerBlock\"></ng-template>\n    </ng-container>\n    \n    <ng-container *ngIf=\"tip\">\n      <ng-template [ngTemplateOutlet]=\"tip\"></ng-template>\n    </ng-container>\n    <ng-container *ngIf=\"listType !== 'picture-card'\">\n      <ng-template [ngTemplateOutlet]=\"uploadList\"></ng-template>\n    </ng-container>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.ElUploadRequest }, { type: ɵngcc2.DomSanitizer }]; }, { trigger: [{
            type: ContentChild,
            args: ['trigger']
        }], dragger: [{
            type: ContentChild,
            args: ['dragger']
        }], tip: [{
            type: ContentChild,
            args: ['tip']
        }], input: [{
            type: ViewChild,
            args: ['input']
        }] }); })();
    return ElUpload;
}(ElUploadProps));
export { ElUpload };
function ElUpload_tsickle_Closure_declarations() {
    /** @type {?} */
    ElUpload.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElUpload.ctorParameters;
    /** @type {?} */
    ElUpload.propDecorators;
    /** @type {?} */
    ElUpload.prototype.trigger;
    /** @type {?} */
    ElUpload.prototype.dragger;
    /** @type {?} */
    ElUpload.prototype.tip;
    /** @type {?} */
    ElUpload.prototype.input;
    /** @type {?} */
    ElUpload.prototype.files;
    /** @type {?} */
    ElUpload.prototype.request;
    /** @type {?} */
    ElUpload.prototype.sanitizer;
}

//# sourceMappingURL=upload.js.map