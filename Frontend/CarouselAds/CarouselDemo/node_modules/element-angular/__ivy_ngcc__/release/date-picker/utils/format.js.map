{"version":3,"file":"format.js","sources":["../../../src/date-picker/utils/format.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;;AACpB;AAEgB,IA6EhB;AAGC,IADC,CAAC;AACH,IAjFA;AACA;AACI;AAEA,OADD;AACH,IADG,sBAAA,GACH,UADG,IAAA;AACA,QACC,MAAM,CADC,OAAO,IAAA,KAAS,QAAA,CAAS,CAAA,CAAE,IAAI,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA,CAAE,IAAA,CAAA;AAC/C,IACN,CAAC;AACF,IAAD;AACA;AACI;AACI;AAEA,OADL;AACH,IALG,6BAAA,GAKH,UALG,IAAA,EAAA,KAAA;AACA,QAKC,IAAM,gBAAgB,CALhB,UAAA,GAAsB,IAAA,GAAO,CAAA,KAAM,CAAA,IAAK,IAAA,GAAO,GAAA,KAAQ,CAAA,IAAK,IAAA,GAAO,GAAA,KAAQ,CAAA,CAAA;AAIzD,QAExB,MAAM,CALC;AAAE,YAMP,KAAK,KALK,CAAA,IAAK,CAAA,UAAE;AAEjB,YAIA,KAAK,KALK,CAAA,IAAK,UAAA;AACF,YAKb,CAAC,CALC,CAAC,CAAC,CAAC,EAAE,CAAA,EAAG,CAAA,EAAG,EAAA,CAAG,CAAC,IAAC,CAAI,UAAA,GAAC,IAAM,OAAA,GAAA,KAAQ,KAAA,EAAR,CAAQ,CAAM,CAAC;AAAE,YAM9C,IAAI;AACV,SAAK,CALC,MAAC,CAAM,UAAC,GAAC,EAAI,IAAA,EAAM,KAAA,IAAU,OAAA,GAAA,CAAI,CAAA,CAAE,GAAA,CAAI,CAAA,CAAE,CAAA,IAAE,CAAI,CAAA,CAAE,EAAA,GAAK,KAAA,CAAM,CAAA,CAAE,CAAA,CAAE,EAAnC,CAAmC,EAAE,CAAA,CAAE,CAAA;AAE9C,IAI1B,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IARG,6BAAA,GAQH,UARG,IAAA;AAAI,QASH,IAAM,gBAAgB,CARhB,WAAA,GAAoB,UAAA,CAAW,WAAC,CAAW,IAAC,CAAI,CAAA;AACX,QAQ3C,WAAW,CARC,OAAC,CAAO,CAAC,CAAC,CAAA;AAAC,QASvB,MAAM,CARC,WAAA,CAAY,MAAC,EAAM,CAAA;AAG1B,IAMF,CAAC;AACF,IAAD;AACA;AACI;AAEA,OADD;AACH,IAXG,gCAAA,GAWH,UAXG,UAAA;AAAI,QAYH,IAAM,gBAAgB,CAXhB,WAAA,GAAoB,UAAA,CAAW,WAAC,CAAW,UAAC,CAAU,CAAA;AAE5D,QAUA,IAAM,gBAAgB,CAXhB,WAAA,GAAc,IAAI,IAAA,EAAK,CAAA;AAAC,QAY9B,EAAE,CAAC,CAAC,WAXC,CAAW,WAAC,EAAW,KAAM,WAAA,CAAY,WAAC,EAAW,CAAE,CAAC,CAAA;AAAC,YAY5D,MAAM,CAXC,IAAA,CAAA;AAAC,QAYV,CAAC;AACL,QAAI,IAAM,gBAAgB,CAXhB,MAAA,GAAiB,WAAA,CAAY,QAAC,EAAQ,GAAI,WAAA,CAAY,QAAC,EAAQ,CAAA;AAKnD,QAOlB,MAAM,CAXC,CAAA,MAAE,GAAQ,CAAA,IAAK,MAAA,GAAS,CAAA,CAAE,CAAC,CAAC,CAAA,CAAE,IAAA,CAAK,CAAA,CAAE,MAAA,CAAA;AAI/C,IAQC,CAAC;AACF,IAAD;AACA;AACI;AACI;AAEA,OADL;AACH,IAfG,iBAAA,GAeH,UAfG,KAAA,EAAA,MAAA;AACA,QAeC,IAAM,gBAAgB,CAfhB,CAAA,GAAU,IAAI,IAAA,CAAK,KAAC,CAAK,CAAA;AAAC,QAgBhC,EAAE,CAAC,CAAC,MAfC,CAAM,CAAC,CAAC,KAAK,cAAA,CAAe;AAAC,YAAA,MAAA,CAAO,EAAA,CAAA;AAAC,QAgB1C,IAAM,gBAAgB,CAfhB,OAAA,GAAoB,UAAA,KAAiB,IAAmB,OAAA,IAAI,MAAA,CAAO,MAAC,KAAI,MAAK,CAAG,EAAxB,CAAwB,CAAA;AACnD,QAenC,IAAM,gBAAgB,CAfhB,IAAA,GAAiB,CAAA,IAAE,EAAK,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,IAAA,EAAM,GAAA,CAAI,CAAA;AAClE,QAeE,IAAM,gBAAgB,CAfhB,MAAA,GAAmB;AAEtB,YAcD,CAAC,CAfC,QAAC,EAAQ,GAAI,CAAA;AACJ,YAeX,CAAC,CAfC,OAAC,EAAO;AAAE,YAgBZ,CAAC,CAfC,QAAC,EAAQ;AAAE,YAgBb,CAAC,CAfC,UAAC,EAAU;AAEN,YAcP,CAAC,CAfC,UAAC,EAAU;AACF,YAeX,IAAI,CAfC,KAAC,CAAK,CAAC,CAAC,CAAC,QAAC,EAAQ,GAAI,CAAA,CAAE,GAAG,CAAA,CAAE;AAEvC,YAcK,CAAC,CAfC,eAAC,EAAe;AACnB,SAeA,CAAA;AACL,QACI,EAAE,CAAC,CAAC,MAfC,CAAM,IAAC,CAAI,MAAC,CAAM,CAAC,CAAC,CAAA;AAAC,YAgBxB,MAAM,GAfG,MAAA,CAAO,OAAC,CAAO,MAAC,CAAM,EAAC,EAAG,CAAA,CAAE,CAAC,WAAC,EAAW,GAAI,EAAA,CAAG,CAAC,MAAC,CAAM,CAAC,GAAG,MAAA,CAAO,EAAC,CAAE,MAAC,CAAM,CAAC,CAAA;AACpD,QAerC,CAAC;AACL,QACI,IAAI,gBAAgB,CAfhB,GAAA,GAAM,CAAA,EAAE,gBAAA,CAAC,GAAK,EAAO,gBAAA,CAAC,GAAK,CAAA;AAAC,QAgBhC,OAAO,GAfC,GAAK,IAAA,CAAK,MAAC,EAAO,CAAA;AAAC,YAgBzB,GAAG,GAfG,IAAA,CAAK,GAAC,CAAG,CAAA;AAAC,YAgBhB,GAAG,GAfG,MAAA,CAAO,GAAC,CAAG,CAAA;AAClB,YAeC,EAAE,CAAC,CAAC,OAfC,CAAO,GAAC,CAAG,CAAC,IAAC,CAAI,MAAC,CAAM,CAAC,CAAC,CAAA;AACnB,gBAeV,MAAM,GAfG,CAAA,CAAM,MAAC,CAAA,CAAM,CAAC,OAAC,CAAO,MAAC,CAAM,EAAC,EAAG,CAAA,MAAE,CAAM,EAAC,CAAE,MAAC,KAAU,CAAA,CAAE,CAAC,CAAA,CAAE,GAAA,CAAI,CAAA,CAAE,CAAA,IAAE,GAAM,GAAA,CAAI,CAAC,MAAC,CAAM,CAAC,EAAC,GAAI,GAAA,CAAI,CAAC,MAAC,CAAM,CAAC,CAAA;AAKtH,YAWE,CAAC;AACP,YAAM,GAAG,EAfC,CAAA;AAAC,QAgBP,CAAC;AACL,QAAI,MAAM,CAfC,MAAA,CAAA;AAEV,IAcC,CAAC;AACF,IAGD;AACA;AACI;AAEA,OADD;AACH,IAAA,4BAhBG,GAgBH,UAhBG,KAAA;AAAI,QAiBH,IAAM,gBAAgB,CAhBhB,IAAA,GAAa,IAAI,IAAA,CAAK,KAAC,CAAK,CAAA;AACvB,QAgBX,EAAE,CAAC,CAAC,MAhBC,CAAM,IAAC,CAAI,KAAK,cAAA,CAAe,CAAC,CAAA;AACtC,YAgBG,MAAM,CAhBC,CAAA,CAAA;AAAC,QAiBV,CAAC;AACL,QAAI,MAAM,CAhBC,IAAA,CAAK,OAAC,EAAO,CAAA;AAElB,IAeJ,CAAC,CAZD;IAFK,JAGP,IAgBA;iBAnBO,jBAoBP;CApB2C,DAsB3C,OADG;GAJH,EAhBE,IAAA,EAAM,UAAA,EAAW,OAiBlB,9BAID,IAlBC,yBAAA,GAAA,cAAA,OAAA,EAmBA,EAnBA,CAmBA;;;;;gDAAC;AACF,IAAA,iBAAC;AAED,CAxGA,AAsGC,IAAA;AACD,SArGC,UAAA;AAsGD;AACA,IAAA,gBAAgB;AAChB,IAAA,UAAU,CAAC,UAAU,CAAC;AACtB,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,UAAU,CAAC,cAAc,CAAC;AAC1B,CAAC;AACD","sourcesContent":["import { Injectable } from '@angular/core';\nexport class DateFormat {\n/**\n * @param {?} date\n * @return {?}\n */\nstatic checkedDate(date: number | Date): Date {\n    return typeof date === 'number' ? new Date(date) : date\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @return {?}\n */\nstatic getDayCountOfMonth(year: number, month: number): number {\n    const /** @type {?} */ isLeapYear: boolean = year % 4 === 0 && year % 100 !== 0 || year % 400 === 0\n    return [\n      month === 1 && !isLeapYear,\n      month === 1 && isLeapYear,\n      !!([3, 5, 8, 10].find(num => num === month)),\n      true,\n    ].reduce((pre, next, index) => pre ? pre : (next ? 28 + index : 0), 0)\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nstatic getFirstDayOfMonth(date: number | Date): number {\n    const /** @type {?} */ checkedDate: Date = DateFormat.checkedDate(date)\n    checkedDate.setDate(1)\n    return checkedDate.getDay()\n  }\n/**\n * @param {?} targetDate\n * @return {?}\n */\nstatic getCurrentMonthOffset(targetDate: number | Date): number | null {\n    const /** @type {?} */ checkedDate: Date = DateFormat.checkedDate(targetDate)\n    const /** @type {?} */ currentDate = new Date()\n    if (currentDate.getFullYear() !== checkedDate.getFullYear()) {\n      return null\n    }\n    const /** @type {?} */ offset: number = currentDate.getMonth() - checkedDate.getMonth()\n    return (offset > 1 || offset < -1) ? null : offset\n  }\n/**\n * @param {?} input\n * @param {?} format\n * @return {?}\n */\nstatic moment(input: any, format: string): string {\n    const /** @type {?} */ d: Date = new Date(input)\n    if (String(d) === 'Invalid Date') return ''\n    const /** @type {?} */ makeReg: Function = (value: number | string): RegExp => new RegExp(`(${value})`)\n    const /** @type {?} */ keys: string[] = ['M+', 'd+', 'h+', 'm+', 's+', 'q+', 'S']\n    const /** @type {?} */ values: number[] = [\n      d.getMonth() + 1,\n      d.getDate(),\n      d.getHours(),\n      d.getMinutes(),\n      d.getSeconds(),\n      Math.floor((d.getMonth() + 3) / 3),\n      d.getMilliseconds(),\n    ]\n    \n    if (/(y+)/.test(format)) {\n      format = format.replace(RegExp.$1, (d.getFullYear() + '').substr(4 - RegExp.$1.length))\n    }\n    \n    let /** @type {?} */ len = 0, /** @type {?} */ key: string, /** @type {?} */ val: number\n    while (len < keys.length) {\n      key = keys[len]\n      val = values[len]\n      if (makeReg(key).test(format)) {\n        format = ( /** @type {?} */((<any>format))).replace(RegExp.$1, (RegExp.$1.length === 1) ? val : ('00' + val).substr(('' + val).length))\n      }\n      len ++\n    }\n    return format\n  }\nconstructor() {\n  \n  }\n/**\n * @param {?=} input\n * @return {?}\n */\ngetTime(input?: any): number {\n    const /** @type {?} */ date: Date = new Date(input)\n    if (String(date) === 'Invalid Date') {\n      return 0\n    }\n    return date.getTime()\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DateFormat_tsickle_Closure_declarations() {\n/** @type {?} */\nDateFormat.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDateFormat.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}