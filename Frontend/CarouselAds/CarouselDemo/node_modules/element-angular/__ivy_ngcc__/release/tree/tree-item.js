import { Component, Input, Optional, } from '@angular/core';
import { ElTree } from './tree';
import { dropAnimation } from '../shared/animation/index';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tree';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../checkbox/checkbox';

function ElTreeItem_el_checkbox_3_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "el-checkbox", 6);
    ɵngcc0.ɵɵlistener("modelChange", function ElTreeItem_el_checkbox_3_Template_el_checkbox_modelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.checkHandle($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("model", ctx_r0.model.checked)("indeterminate", ctx_r0.model._indeterminate)("elDisabled", ctx_r0.root.elDisabled);
} }
function ElTreeItem_div_6_el_tree_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "el-tree-item", 9);
} if (rf & 2) {
    var item_r5 = ctx.$implicit;
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("model", item_r5)("indent", ctx_r4.indent);
} }
function ElTreeItem_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, ElTreeItem_div_6_el_tree_item_1_Template, 1, 2, "el-tree-item", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@dropAnimation", ctx_r1.model.expanded);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.model.children);
} }
var _c0 = function (a0) { return { "padding-left": a0 }; };
var ElTreeItem = /** @class */ (function () {
    /**
     * @param {?} root
     */
    function ElTreeItem(root) {
        this.root = root;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ElTreeItem.prototype.clickHandle = function (event) {
        event.stopPropagation();
        if (!this.root.expandOnClickNode)
            return this.itemEmitter('click');
        this.updateExpanded();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ElTreeItem.prototype.iconClickHandle = function (event) {
        event.stopPropagation();
        this.updateExpanded();
    };
    /**
     * @return {?}
     */
    ElTreeItem.prototype.checkHandle = function () {
        if (this.root.elDisabled)
            return;
        this.root.updateChecked(this.model.id);
        this.root.emitter({
            label: this.model.label,
            treeNodeID: this.model.id,
            action: 'checkbox',
            checked: this.model.checked,
        });
    };
    /**
     * @return {?}
     */
    ElTreeItem.prototype.updateExpanded = function () {
        var /** @type {?} */ dontUpdateExpanded = this.isLeaf();
        var /** @type {?} */ nextAction = dontUpdateExpanded ? 'click' : (this.model.expanded ? 'close' : 'open');
        this.itemEmitter(nextAction);
        !dontUpdateExpanded && this.root.updateExpanded(this.model.id);
    };
    /**
     * @return {?}
     */
    ElTreeItem.prototype.isLeaf = function () {
        return !this.model.children || !this.model.children.length;
    };
    /**
     * @param {?} action
     * @return {?}
     */
    ElTreeItem.prototype.itemEmitter = function (action) {
        this.root.emitter({
            label: this.model.label,
            treeNodeID: this.model.id,
            action: action,
            checked: this.model.checked,
        });
    };
    /**
     * @nocollapse
     */
    ElTreeItem.ctorParameters = function () { return [
        { type: ElTree, decorators: [{ type: Optional },] },
    ]; };
    ElTreeItem.propDecorators = {
        'indent': [{ type: Input },],
        'model': [{ type: Input },],
    };
ElTreeItem.ɵfac = function ElTreeItem_Factory(t) { return new (t || ElTreeItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ElTree, 8)); };
ElTreeItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ElTreeItem, selectors: [["el-tree-item"]], inputs: { indent: "indent", model: "model" }, decls: 7, vars: 14, consts: [["role", "treeitem", 1, "el-tree-node", 3, "click"], [1, "el-tree-node__content", 3, "ngStyle"], [1, "el-tree-node__expand-icon", "el-icon-caret-right", 3, "click"], [3, "model", "indeterminate", "elDisabled", "modelChange", 4, "ngIf"], [1, "el-tree-node__label"], ["class", "el-tree-node__children", 4, "ngIf"], [3, "model", "indeterminate", "elDisabled", "modelChange"], [1, "el-tree-node__children"], [3, "model", "indent", 4, "ngFor", "ngForOf"], [3, "model", "indent"]], template: function ElTreeItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function ElTreeItem_Template_div_click_0_listener($event) { return ctx.clickHandle($event); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵlistener("click", function ElTreeItem_Template_span_click_2_listener($event) { return ctx.iconClickHandle($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ElTreeItem_el_checkbox_3_Template, 1, 3, "el-checkbox", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ElTreeItem_div_6_Template, 2, 2, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-focusable", !ctx.root.elDisabled)("is-checked", !ctx.root.elDisabled && ctx.model.checked);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction1(12, _c0, (ctx.model._level - 1) * ctx.indent + "px"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("expanded", ctx.model.expanded)("is-leaf", ctx.isLeaf());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.root.showCheckbox);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.model.label);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLeaf());
    } }, directives: [ɵngcc2.NgStyle, ɵngcc2.NgIf, ɵngcc3.ElCheckbox, ɵngcc2.NgForOf, ElTreeItem], encapsulation: 2, data: { animation: [dropAnimation] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ElTreeItem, [{
        type: Component,
        args: [{
                selector: 'el-tree-item',
                animations: [dropAnimation],
                template: "\n    <div class=\"el-tree-node\" (click)=\"clickHandle($event)\"\n      [class.is-focusable]=\"!root.elDisabled\"\n      [class.is-checked]=\"!root.elDisabled && model.checked\"\n      role=\"treeitem\">\n      <div class=\"el-tree-node__content\"\n        [ngStyle]=\"{ 'padding-left': (model._level - 1) * indent + 'px' }\">\n        <span class=\"el-tree-node__expand-icon el-icon-caret-right\"\n          [class.expanded]=\"model.expanded\"\n          [class.is-leaf]=\"isLeaf()\"\n          (click)=\"iconClickHandle($event)\"></span>\n        <el-checkbox *ngIf=\"root.showCheckbox\" [model]=\"model.checked\" [indeterminate]=\"model._indeterminate\"\n          [elDisabled]=\"root.elDisabled\"\n          (modelChange)=\"checkHandle($event)\">\n        </el-checkbox>\n        <span class=\"el-tree-node__label\">{{ model.label }}</span>\n      </div>\n      <div class=\"el-tree-node__children\" *ngIf=\"!isLeaf()\" [@dropAnimation]=\"model.expanded\">\n        <el-tree-item *ngFor=\"let item of model.children\"\n          [model]=\"item\" [indent]=\"indent\">\n        </el-tree-item>\n      </div>\n    </div>\n  "
            }]
    }], function () { return [{ type: ɵngcc1.ElTree, decorators: [{
                type: Optional
            }] }]; }, { indent: [{
            type: Input
        }], model: [{
            type: Input
        }] }); })();
    return ElTreeItem;
}());
export { ElTreeItem };
function ElTreeItem_tsickle_Closure_declarations() {
    /** @type {?} */
    ElTreeItem.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ElTreeItem.ctorParameters;
    /** @type {?} */
    ElTreeItem.propDecorators;
    /** @type {?} */
    ElTreeItem.prototype.indent;
    /** @type {?} */
    ElTreeItem.prototype.model;
    /** @type {?} */
    ElTreeItem.prototype.root;
}

//# sourceMappingURL=tree-item.js.map